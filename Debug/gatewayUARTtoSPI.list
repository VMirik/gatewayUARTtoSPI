
gatewayUARTtoSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006788  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006898  08006898  00007898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006938  08006938  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  08006938  08006938  00007938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006940  08006940  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006940  08006940  00007940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006944  08006944  00007944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006948  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b6c  20000014  0800695c  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b80  0800695c  00008b80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132fc  00000000  00000000  0000803d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330a  00000000  00000000  0001b339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  0001e648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cab  00000000  00000000  0001f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001925a  00000000  00000000  0002036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001499e  00000000  00000000  000395c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1b1  00000000  00000000  0004df63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db114  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042e0  00000000  00000000  000db158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000df438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08006880 	.word	0x08006880

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08006880 	.word	0x08006880

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ce:	2afd      	cmp	r2, #253	@ 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	@ 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	@ 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	@ 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__aeabi_f2uiz>:
 800061c:	0042      	lsls	r2, r0, #1
 800061e:	d20e      	bcs.n	800063e <__aeabi_f2uiz+0x22>
 8000620:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000624:	d30b      	bcc.n	800063e <__aeabi_f2uiz+0x22>
 8000626:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800062a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062e:	d409      	bmi.n	8000644 <__aeabi_f2uiz+0x28>
 8000630:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000634:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	4770      	bx	lr
 800063e:	f04f 0000 	mov.w	r0, #0
 8000642:	4770      	bx	lr
 8000644:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000648:	d101      	bne.n	800064e <__aeabi_f2uiz+0x32>
 800064a:	0242      	lsls	r2, r0, #9
 800064c:	d102      	bne.n	8000654 <__aeabi_f2uiz+0x38>
 800064e:	f04f 30ff 	mov.w	r0, #4294967295
 8000652:	4770      	bx	lr
 8000654:	f04f 0000 	mov.w	r0, #0
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000662:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <MX_DMA_Init+0x68>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a17      	ldr	r2, [pc, #92]	@ (80006c4 <MX_DMA_Init+0x68>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_DMA_Init+0x68>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2105      	movs	r1, #5
 800067e:	200c      	movs	r0, #12
 8000680:	f000 fe51 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000684:	200c      	movs	r0, #12
 8000686:	f000 fe6a 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2105      	movs	r1, #5
 800068e:	200d      	movs	r0, #13
 8000690:	f000 fe49 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000694:	200d      	movs	r0, #13
 8000696:	f000 fe62 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2105      	movs	r1, #5
 800069e:	200e      	movs	r0, #14
 80006a0:	f000 fe41 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80006a4:	200e      	movs	r0, #14
 80006a6:	f000 fe5a 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2105      	movs	r1, #5
 80006ae:	200f      	movs	r0, #15
 80006b0:	f000 fe39 	bl	8001326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006b4:	200f      	movs	r0, #15
 80006b6:	f000 fe52 	bl	800135e <HAL_NVIC_EnableIRQ>

}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000

080006c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	xMutex = xSemaphoreCreateMutex();
 80006cc:	2001      	movs	r0, #1
 80006ce:	f003 fc51 	bl	8003f74 <xQueueCreateMutex>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <MX_FREERTOS_Init+0x5c>)
 80006d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
    xQueueUSARTtoSPI = xQueueCreate(sizeOfQueue, BUFFER_SIZE);
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_FREERTOS_Init+0x60>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	210a      	movs	r1, #10
 80006e0:	4618      	mov	r0, r3
 80006e2:	f003 fbcb 	bl	8003e7c <xQueueGenericCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a10      	ldr	r2, [pc, #64]	@ (800072c <MX_FREERTOS_Init+0x64>)
 80006ea:	6013      	str	r3, [r2, #0]
    xQueueSPItoUSART = xQueueCreate(sizeOfQueue, BUFFER_SIZE);
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <MX_FREERTOS_Init+0x60>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2200      	movs	r2, #0
 80006f2:	210a      	movs	r1, #10
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fbc1 	bl	8003e7c <xQueueGenericCreate>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000730 <MX_FREERTOS_Init+0x68>)
 80006fe:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskSPI */
  TaskSPIHandle = osThreadNew(vTaskSPI, NULL, &TaskSPI_attributes);
 8000700:	4a0c      	ldr	r2, [pc, #48]	@ (8000734 <MX_FREERTOS_Init+0x6c>)
 8000702:	2100      	movs	r1, #0
 8000704:	480c      	ldr	r0, [pc, #48]	@ (8000738 <MX_FREERTOS_Init+0x70>)
 8000706:	f003 f919 	bl	800393c <osThreadNew>
 800070a:	4603      	mov	r3, r0
 800070c:	4a0b      	ldr	r2, [pc, #44]	@ (800073c <MX_FREERTOS_Init+0x74>)
 800070e:	6013      	str	r3, [r2, #0]

  /* creation of TaskUSART */
  TaskUSARTHandle = osThreadNew(vTaskUSART, NULL, &TaskUSART_attributes);
 8000710:	4a0b      	ldr	r2, [pc, #44]	@ (8000740 <MX_FREERTOS_Init+0x78>)
 8000712:	2100      	movs	r1, #0
 8000714:	480b      	ldr	r0, [pc, #44]	@ (8000744 <MX_FREERTOS_Init+0x7c>)
 8000716:	f003 f911 	bl	800393c <osThreadNew>
 800071a:	4603      	mov	r3, r0
 800071c:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <MX_FREERTOS_Init+0x80>)
 800071e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000038 	.word	0x20000038
 8000728:	20000000 	.word	0x20000000
 800072c:	20000030 	.word	0x20000030
 8000730:	20000034 	.word	0x20000034
 8000734:	080068c4 	.word	0x080068c4
 8000738:	0800074d 	.word	0x0800074d
 800073c:	20000078 	.word	0x20000078
 8000740:	080068e8 	.word	0x080068e8
 8000744:	080008a1 	.word	0x080008a1
 8000748:	2000007c 	.word	0x2000007c

0800074c <vTaskSPI>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vTaskSPI */
void vTaskSPI(void *argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskSPI */

	memset(&filler_data[0], 0, BUFFER_SIZE);
 8000754:	220a      	movs	r2, #10
 8000756:	2100      	movs	r1, #0
 8000758:	4847      	ldr	r0, [pc, #284]	@ (8000878 <vTaskSPI+0x12c>)
 800075a:	f006 f857 	bl	800680c <memset>
	memset(&received_data[0], 0, BUFFER_SIZE);
 800075e:	220a      	movs	r2, #10
 8000760:	2100      	movs	r1, #0
 8000762:	4846      	ldr	r0, [pc, #280]	@ (800087c <vTaskSPI+0x130>)
 8000764:	f006 f852 	bl	800680c <memset>

	fSpi1EndTransmission = false;
 8000768:	4b45      	ldr	r3, [pc, #276]	@ (8000880 <vTaskSPI+0x134>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Transmit_DMA(&hspi1, filler_data, BUFFER_SIZE); // не цекличное
 800076e:	220a      	movs	r2, #10
 8000770:	4941      	ldr	r1, [pc, #260]	@ (8000878 <vTaskSPI+0x12c>)
 8000772:	4844      	ldr	r0, [pc, #272]	@ (8000884 <vTaskSPI+0x138>)
 8000774:	f001 fe8c 	bl	8002490 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(&hspi1, received_data, BUFFER_SIZE);
 8000778:	220a      	movs	r2, #10
 800077a:	4940      	ldr	r1, [pc, #256]	@ (800087c <vTaskSPI+0x130>)
 800077c:	4841      	ldr	r0, [pc, #260]	@ (8000884 <vTaskSPI+0x138>)
 800077e:	f001 ff39 	bl	80025f4 <HAL_SPI_Receive_DMA>
  /* Infinite loop */
    for(;;)
    {
    	do
    	{
    	    if(fSpi1EndTransmission)
 8000782:	4b3f      	ldr	r3, [pc, #252]	@ (8000880 <vTaskSPI+0x134>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	2b00      	cmp	r3, #0
 800078a:	d070      	beq.n	800086e <vTaskSPI+0x122>
    	    {
    	    	uint16_t packedSize = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	81fb      	strh	r3, [r7, #14]
    		    // ======================== Outgoing Packet Handler =============================
    		    if(fUartToSpiSending || uxQueueMessagesWaiting(xQueueUSARTtoSPI) > 0)
 8000790:	4b3d      	ldr	r3, [pc, #244]	@ (8000888 <vTaskSPI+0x13c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d107      	bne.n	80007a8 <vTaskSPI+0x5c>
 8000798:	4b3c      	ldr	r3, [pc, #240]	@ (800088c <vTaskSPI+0x140>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f003 ff91 	bl	80046c4 <uxQueueMessagesWaiting>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d033      	beq.n	8000810 <vTaskSPI+0xc4>
    		    {
    	    		if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
 80007a8:	4b39      	ldr	r3, [pc, #228]	@ (8000890 <vTaskSPI+0x144>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f04f 31ff 	mov.w	r1, #4294967295
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 fe77 	bl	80044a4 <xQueueSemaphoreTake>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d13b      	bne.n	8000834 <vTaskSPI+0xe8>
    	    		{
        		        if (xQueueReceive(xQueueUSARTtoSPI, (void*)tmpBuff, 0) == pdTRUE)
 80007bc:	4b33      	ldr	r3, [pc, #204]	@ (800088c <vTaskSPI+0x140>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2200      	movs	r2, #0
 80007c2:	4934      	ldr	r1, [pc, #208]	@ (8000894 <vTaskSPI+0x148>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f003 fd8b 	bl	80042e0 <xQueueReceive>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d117      	bne.n	8000800 <vTaskSPI+0xb4>
        		        {
        		    	     memset(&filler_data[0], 0, BUFFER_SIZE);
 80007d0:	220a      	movs	r2, #10
 80007d2:	2100      	movs	r1, #0
 80007d4:	4828      	ldr	r0, [pc, #160]	@ (8000878 <vTaskSPI+0x12c>)
 80007d6:	f006 f819 	bl	800680c <memset>
        		    	     packedSize = strlen((const char *)tmpBuff);
 80007da:	482e      	ldr	r0, [pc, #184]	@ (8000894 <vTaskSPI+0x148>)
 80007dc:	f7ff fcb8 	bl	8000150 <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	81fb      	strh	r3, [r7, #14]
        		    	     memcpy(&filler_data[0], &tmpBuff[0], packedSize);
 80007e4:	89fb      	ldrh	r3, [r7, #14]
 80007e6:	461a      	mov	r2, r3
 80007e8:	492a      	ldr	r1, [pc, #168]	@ (8000894 <vTaskSPI+0x148>)
 80007ea:	4823      	ldr	r0, [pc, #140]	@ (8000878 <vTaskSPI+0x12c>)
 80007ec:	f006 f83a 	bl	8006864 <memcpy>
        		        else
        		        {
        		        	xSemaphoreGive(xMutex);
        			        break;
        		        }
        		        xSemaphoreGive(xMutex);
 80007f0:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <vTaskSPI+0x144>)
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	2300      	movs	r3, #0
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	f003 fbd3 	bl	8003fa4 <xQueueGenericSend>
    	    		if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
 80007fe:	e019      	b.n	8000834 <vTaskSPI+0xe8>
        		        	xSemaphoreGive(xMutex);
 8000800:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <vTaskSPI+0x144>)
 8000802:	6818      	ldr	r0, [r3, #0]
 8000804:	2300      	movs	r3, #0
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	f003 fbcb 	bl	8003fa4 <xQueueGenericSend>
        			        break;
 800080e:	e02e      	b.n	800086e <vTaskSPI+0x122>
    	    		}
    		    }
    		    else
    		    {
    		    	//If the queue for sending is full, then we will wait
    		    	UBaseType_t count = uxQueueMessagesWaiting(xQueueSPItoUSART);
 8000810:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <vTaskSPI+0x14c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f003 ff55 	bl	80046c4 <uxQueueMessagesWaiting>
 800081a:	60b8      	str	r0, [r7, #8]
    		    	if(count < sizeOfQueue)
 800081c:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <vTaskSPI+0x150>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	68ba      	ldr	r2, [r7, #8]
 8000822:	429a      	cmp	r2, r3
 8000824:	d222      	bcs.n	800086c <vTaskSPI+0x120>
    		    	{
    		    		memset(&filler_data[0], 0, BUFFER_SIZE);
 8000826:	220a      	movs	r2, #10
 8000828:	2100      	movs	r1, #0
 800082a:	4813      	ldr	r0, [pc, #76]	@ (8000878 <vTaskSPI+0x12c>)
 800082c:	f005 ffee 	bl	800680c <memset>
    		    		packedSize = BUFFER_SIZE;
 8000830:	230a      	movs	r3, #10
 8000832:	81fb      	strh	r3, [r7, #14]
    		    		break;
    		    }


    		    // ======================== Incoming Packet Handler =============================
    		    if (xQueueSend(xQueueUSARTtoSPI, (void*)received_data, portMAX_DELAY) != pdPASS)
 8000834:	4b15      	ldr	r3, [pc, #84]	@ (800088c <vTaskSPI+0x140>)
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	2300      	movs	r3, #0
 800083a:	f04f 32ff 	mov.w	r2, #4294967295
 800083e:	490f      	ldr	r1, [pc, #60]	@ (800087c <vTaskSPI+0x130>)
 8000840:	f003 fbb0 	bl	8003fa4 <xQueueGenericSend>
    		    {
    		        // Error sending data to queue
    		    }
    		    memset(&received_data[0], 0, BUFFER_SIZE);
 8000844:	220a      	movs	r2, #10
 8000846:	2100      	movs	r1, #0
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <vTaskSPI+0x130>)
 800084a:	f005 ffdf 	bl	800680c <memset>

    		    fSpi1EndTransmission = false;
 800084e:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <vTaskSPI+0x134>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
    		    HAL_SPI_Transmit_DMA(&hspi1, filler_data, packedSize);
 8000854:	89fb      	ldrh	r3, [r7, #14]
 8000856:	461a      	mov	r2, r3
 8000858:	4907      	ldr	r1, [pc, #28]	@ (8000878 <vTaskSPI+0x12c>)
 800085a:	480a      	ldr	r0, [pc, #40]	@ (8000884 <vTaskSPI+0x138>)
 800085c:	f001 fe18 	bl	8002490 <HAL_SPI_Transmit_DMA>
    		    HAL_SPI_Receive_DMA(&hspi1, received_data, BUFFER_SIZE);
 8000860:	220a      	movs	r2, #10
 8000862:	4906      	ldr	r1, [pc, #24]	@ (800087c <vTaskSPI+0x130>)
 8000864:	4807      	ldr	r0, [pc, #28]	@ (8000884 <vTaskSPI+0x138>)
 8000866:	f001 fec5 	bl	80025f4 <HAL_SPI_Receive_DMA>
 800086a:	e000      	b.n	800086e <vTaskSPI+0x122>
    		    		break;
 800086c:	bf00      	nop
    	}
    	while(0);



      osDelay(10);
 800086e:	200a      	movs	r0, #10
 8000870:	f003 f90e 	bl	8003a90 <osDelay>
    	    if(fSpi1EndTransmission)
 8000874:	e785      	b.n	8000782 <vTaskSPI+0x36>
 8000876:	bf00      	nop
 8000878:	2000003c 	.word	0x2000003c
 800087c:	20000048 	.word	0x20000048
 8000880:	20000080 	.word	0x20000080
 8000884:	20000084 	.word	0x20000084
 8000888:	20000076 	.word	0x20000076
 800088c:	20000030 	.word	0x20000030
 8000890:	20000038 	.word	0x20000038
 8000894:	2000006c 	.word	0x2000006c
 8000898:	20000034 	.word	0x20000034
 800089c:	20000000 	.word	0x20000000

080008a0 <vTaskUSART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskUSART */
void vTaskUSART(void *argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskUSART */
	uint16_t currentPos = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	83fb      	strh	r3, [r7, #30]
	memset(&uartBufferRX[0], 0, BUFFER_SIZE);
 80008ac:	220a      	movs	r2, #10
 80008ae:	2100      	movs	r1, #0
 80008b0:	4867      	ldr	r0, [pc, #412]	@ (8000a50 <vTaskUSART+0x1b0>)
 80008b2:	f005 ffab 	bl	800680c <memset>
	memset(&uartBufferTX[0], 0, BUFFER_SIZE);
 80008b6:	220a      	movs	r2, #10
 80008b8:	2100      	movs	r1, #0
 80008ba:	4866      	ldr	r0, [pc, #408]	@ (8000a54 <vTaskUSART+0x1b4>)
 80008bc:	f005 ffa6 	bl	800680c <memset>
	HAL_UART_Receive_DMA(&huart1, &uartBufferRX[0], BUFFER_SIZE); // circle
 80008c0:	220a      	movs	r2, #10
 80008c2:	4963      	ldr	r1, [pc, #396]	@ (8000a50 <vTaskUSART+0x1b0>)
 80008c4:	4864      	ldr	r0, [pc, #400]	@ (8000a58 <vTaskUSART+0x1b8>)
 80008c6:	f002 fc6b 	bl	80031a0 <HAL_UART_Receive_DMA>

	uint32_t delay_ms = calculate_uart_delay(huart1.Init.BaudRate, (uint32_t)BUFFER_SIZE);
 80008ca:	4b63      	ldr	r3, [pc, #396]	@ (8000a58 <vTaskUSART+0x1b8>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	210a      	movs	r1, #10
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f8e5 	bl	8000aa0 <calculate_uart_delay>
 80008d6:	60f8      	str	r0, [r7, #12]
	uint32_t delay_counter = delay_ms;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	61bb      	str	r3, [r7, #24]
	fUartToSpiSending = false;
 80008dc:	4b5f      	ldr	r3, [pc, #380]	@ (8000a5c <vTaskUSART+0x1bc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
    for(;;)
    {
    	// ======================== Incoming Packet Handler =============================
    	if(--delay_counter == 0)
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	3b01      	subs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d177      	bne.n	80009de <vTaskUSART+0x13e>
    	{
    		delay_counter = delay_ms;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	61bb      	str	r3, [r7, #24]


    	    uint16_t newPos = BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx);
 80008f2:	4b59      	ldr	r3, [pc, #356]	@ (8000a58 <vTaskUSART+0x1b8>)
 80008f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	f1c3 030a 	rsb	r3, r3, #10
 8000900:	817b      	strh	r3, [r7, #10]
    	    if(currentPos != newPos)
 8000902:	8bfa      	ldrh	r2, [r7, #30]
 8000904:	897b      	ldrh	r3, [r7, #10]
 8000906:	429a      	cmp	r2, r3
 8000908:	d069      	beq.n	80009de <vTaskUSART+0x13e>
    	    {


    	    	uint16_t len = currentPos > newPos ? BUFFER_SIZE - currentPos + newPos : newPos - currentPos;
 800090a:	8bfa      	ldrh	r2, [r7, #30]
 800090c:	897b      	ldrh	r3, [r7, #10]
 800090e:	429a      	cmp	r2, r3
 8000910:	d906      	bls.n	8000920 <vTaskUSART+0x80>
 8000912:	897a      	ldrh	r2, [r7, #10]
 8000914:	8bfb      	ldrh	r3, [r7, #30]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	b29b      	uxth	r3, r3
 800091a:	330a      	adds	r3, #10
 800091c:	b29b      	uxth	r3, r3
 800091e:	e003      	b.n	8000928 <vTaskUSART+0x88>
 8000920:	897a      	ldrh	r2, [r7, #10]
 8000922:	8bfb      	ldrh	r3, [r7, #30]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	b29b      	uxth	r3, r3
 8000928:	82fb      	strh	r3, [r7, #22]
     	    	uint16_t tmpPos = currentPos;
 800092a:	8bfb      	ldrh	r3, [r7, #30]
 800092c:	82bb      	strh	r3, [r7, #20]
    		    uint32_t i = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
    		    if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
 8000932:	4b4b      	ldr	r3, [pc, #300]	@ (8000a60 <vTaskUSART+0x1c0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f04f 31ff 	mov.w	r1, #4294967295
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fdb2 	bl	80044a4 <xQueueSemaphoreTake>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d14b      	bne.n	80009de <vTaskUSART+0x13e>
    		    {
    		    	fUartToSpiSending = true;
 8000946:	4b45      	ldr	r3, [pc, #276]	@ (8000a5c <vTaskUSART+0x1bc>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
    		        memset(&tmpBuff[0], 0, BUFFER_SIZE);
 800094c:	220a      	movs	r2, #10
 800094e:	2100      	movs	r1, #0
 8000950:	4844      	ldr	r0, [pc, #272]	@ (8000a64 <vTaskUSART+0x1c4>)
 8000952:	f005 ff5b 	bl	800680c <memset>
    		        do
                    {
    			        tmpPos += 1;
 8000956:	8abb      	ldrh	r3, [r7, #20]
 8000958:	3301      	adds	r3, #1
 800095a:	82bb      	strh	r3, [r7, #20]
    			        tmpPos %= BUFFER_SIZE;
 800095c:	8aba      	ldrh	r2, [r7, #20]
 800095e:	4b42      	ldr	r3, [pc, #264]	@ (8000a68 <vTaskUSART+0x1c8>)
 8000960:	fba3 1302 	umull	r1, r3, r3, r2
 8000964:	08d9      	lsrs	r1, r3, #3
 8000966:	460b      	mov	r3, r1
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	440b      	add	r3, r1
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	82bb      	strh	r3, [r7, #20]
    			        tmpBuff[i++] = uartBufferRX[tmpPos];
 8000972:	8aba      	ldrh	r2, [r7, #20]
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	1c59      	adds	r1, r3, #1
 8000978:	6139      	str	r1, [r7, #16]
 800097a:	4935      	ldr	r1, [pc, #212]	@ (8000a50 <vTaskUSART+0x1b0>)
 800097c:	5c89      	ldrb	r1, [r1, r2]
 800097e:	4a39      	ldr	r2, [pc, #228]	@ (8000a64 <vTaskUSART+0x1c4>)
 8000980:	54d1      	strb	r1, [r2, r3]

            	        if(uartBufferRX[tmpPos] == 0x00)
 8000982:	8abb      	ldrh	r3, [r7, #20]
 8000984:	4a32      	ldr	r2, [pc, #200]	@ (8000a50 <vTaskUSART+0x1b0>)
 8000986:	5cd3      	ldrb	r3, [r2, r3]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d105      	bne.n	8000998 <vTaskUSART+0xf8>
            	        {
            	    	    fUartToSpiSending = false;
 800098c:	4b33      	ldr	r3, [pc, #204]	@ (8000a5c <vTaskUSART+0x1bc>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
            	    	    if(len == 1) break;
 8000992:	8afb      	ldrh	r3, [r7, #22]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d006      	beq.n	80009a6 <vTaskUSART+0x106>
            	        }

                    }
    		        while(--len > 0);
 8000998:	8afb      	ldrh	r3, [r7, #22]
 800099a:	3b01      	subs	r3, #1
 800099c:	82fb      	strh	r3, [r7, #22]
 800099e:	8afb      	ldrh	r3, [r7, #22]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d1d8      	bne.n	8000956 <vTaskUSART+0xb6>
 80009a4:	e000      	b.n	80009a8 <vTaskUSART+0x108>
            	    	    if(len == 1) break;
 80009a6:	bf00      	nop

    		        if(len > 0)
 80009a8:	8afb      	ldrh	r3, [r7, #22]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <vTaskUSART+0x114>
    			        currentPos = tmpPos;
 80009ae:	8abb      	ldrh	r3, [r7, #20]
 80009b0:	83fb      	strh	r3, [r7, #30]
 80009b2:	e001      	b.n	80009b8 <vTaskUSART+0x118>
    		        else
    			        currentPos = newPos;
 80009b4:	897b      	ldrh	r3, [r7, #10]
 80009b6:	83fb      	strh	r3, [r7, #30]

                    if (tmpBuff[0]!= 0 && xQueueSend(xQueueUSARTtoSPI, (void*)tmpBuff, portMAX_DELAY) == pdPASS)
 80009b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <vTaskUSART+0x1c4>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d007      	beq.n	80009d0 <vTaskUSART+0x130>
 80009c0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a6c <vTaskUSART+0x1cc>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	2300      	movs	r3, #0
 80009c6:	f04f 32ff 	mov.w	r2, #4294967295
 80009ca:	4926      	ldr	r1, [pc, #152]	@ (8000a64 <vTaskUSART+0x1c4>)
 80009cc:	f003 faea 	bl	8003fa4 <xQueueGenericSend>
                    {
                        //
                    }
                    xSemaphoreGive(xMutex);
 80009d0:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <vTaskUSART+0x1c0>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	2300      	movs	r3, #0
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	f003 fae3 	bl	8003fa4 <xQueueGenericSend>
    		    }
    	    }
    	}

    	// ======================== Outgoing Packet Handler =============================
    	if (huart1.gState != HAL_UART_STATE_READY)
 80009de:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <vTaskUSART+0x1b8>)
 80009e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b20      	cmp	r3, #32
 80009e8:	d02d      	beq.n	8000a46 <vTaskUSART+0x1a6>
    	{
    		if (xSemaphoreTake(xMutex, portMAX_DELAY) == pdTRUE)
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <vTaskUSART+0x1c0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f04f 31ff 	mov.w	r1, #4294967295
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 fd56 	bl	80044a4 <xQueueSemaphoreTake>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d123      	bne.n	8000a46 <vTaskUSART+0x1a6>
    		{
  		        if (xQueueReceive(xQueueSPItoUSART, (void*)tmpBuff, 0) == pdTRUE)
 80009fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <vTaskUSART+0x1d0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2200      	movs	r2, #0
 8000a04:	4917      	ldr	r1, [pc, #92]	@ (8000a64 <vTaskUSART+0x1c4>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 fc6a 	bl	80042e0 <xQueueReceive>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d112      	bne.n	8000a38 <vTaskUSART+0x198>
   		        {
  		    	    uint16_t packedSize = strlen((const char *)tmpBuff) + 1;
 8000a12:	4814      	ldr	r0, [pc, #80]	@ (8000a64 <vTaskUSART+0x1c4>)
 8000a14:	f7ff fb9c 	bl	8000150 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	813b      	strh	r3, [r7, #8]
  		    	    memcpy(&uartBufferTX[0], &tmpBuff[0], packedSize);
 8000a20:	893b      	ldrh	r3, [r7, #8]
 8000a22:	461a      	mov	r2, r3
 8000a24:	490f      	ldr	r1, [pc, #60]	@ (8000a64 <vTaskUSART+0x1c4>)
 8000a26:	480b      	ldr	r0, [pc, #44]	@ (8000a54 <vTaskUSART+0x1b4>)
 8000a28:	f005 ff1c 	bl	8006864 <memcpy>

  		    	    if (HAL_UART_Transmit_DMA(&huart1, &uartBufferTX[0], packedSize) != HAL_OK)
 8000a2c:	893b      	ldrh	r3, [r7, #8]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4908      	ldr	r1, [pc, #32]	@ (8000a54 <vTaskUSART+0x1b4>)
 8000a32:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <vTaskUSART+0x1b8>)
 8000a34:	f002 fb44 	bl	80030c0 <HAL_UART_Transmit_DMA>
   			        {
   			           // Error in transmission
   			           //Error_Handler();
   			        }
   		        }
  		        xSemaphoreGive(xMutex);
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <vTaskUSART+0x1c0>)
 8000a3a:	6818      	ldr	r0, [r3, #0]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	f003 faaf 	bl	8003fa4 <xQueueGenericSend>
   		    }
    	}

        osDelay(1);
 8000a46:	2001      	movs	r0, #1
 8000a48:	f003 f822 	bl	8003a90 <osDelay>
    	if(--delay_counter == 0)
 8000a4c:	e749      	b.n	80008e2 <vTaskUSART+0x42>
 8000a4e:	bf00      	nop
 8000a50:	20000054 	.word	0x20000054
 8000a54:	20000060 	.word	0x20000060
 8000a58:	20000164 	.word	0x20000164
 8000a5c:	20000076 	.word	0x20000076
 8000a60:	20000038 	.word	0x20000038
 8000a64:	2000006c 	.word	0x2000006c
 8000a68:	cccccccd 	.word	0xcccccccd
 8000a6c:	20000030 	.word	0x20000030
 8000a70:	20000034 	.word	0x20000034

08000a74 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <MX_GPIO_Init+0x28>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a07      	ldr	r2, [pc, #28]	@ (8000a9c <MX_GPIO_Init+0x28>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <MX_GPIO_Init+0x28>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <calculate_uart_delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t calculate_uart_delay(uint32_t baud_rate, uint32_t num_bytes)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
    float bits_per_byte = 10.0;
 8000aaa:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <calculate_uart_delay+0x54>)
 8000aac:	617b      	str	r3, [r7, #20]
    float time_in_seconds = (bits_per_byte * num_bytes) / baud_rate;
 8000aae:	6838      	ldr	r0, [r7, #0]
 8000ab0:	f7ff fc0c 	bl	80002cc <__aeabi_ui2f>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	6979      	ldr	r1, [r7, #20]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fc5f 	bl	800037c <__aeabi_fmul>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461c      	mov	r4, r3
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff fc02 	bl	80002cc <__aeabi_ui2f>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4619      	mov	r1, r3
 8000acc:	4620      	mov	r0, r4
 8000ace:	f7ff fd09 	bl	80004e4 <__aeabi_fdiv>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	613b      	str	r3, [r7, #16]
    float time_in_milliseconds = time_in_seconds * 1000.0;
 8000ad6:	4908      	ldr	r1, [pc, #32]	@ (8000af8 <calculate_uart_delay+0x58>)
 8000ad8:	6938      	ldr	r0, [r7, #16]
 8000ada:	f7ff fc4f 	bl	800037c <__aeabi_fmul>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	60fb      	str	r3, [r7, #12]
    return time_in_milliseconds;
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f7ff fd9a 	bl	800061c <__aeabi_f2uiz>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	371c      	adds	r7, #28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd90      	pop	{r4, r7, pc}
 8000af2:	bf00      	nop
 8000af4:	41200000 	.word	0x41200000
 8000af8:	447a0000 	.word	0x447a0000

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 fad8 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f810 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f7ff ffb4 	bl	8000a74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b0c:	f7ff fda6 	bl	800065c <MX_DMA_Init>
  MX_SPI1_Init();
 8000b10:	f000 f852 	bl	8000bb8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b14:	f000 f9dc 	bl	8000ed0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b18:	f002 feaa 	bl	8003870 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b1c:	f7ff fdd4 	bl	80006c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b20:	f002 fed8 	bl	80038d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <main+0x28>

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b090      	sub	sp, #64	@ 0x40
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	2228      	movs	r2, #40	@ 0x28
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f005 fe68 	bl	800680c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b52:	2310      	movs	r3, #16
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b5e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b64:	f107 0318 	add.w	r3, r7, #24
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 fffd 	bl	8001b68 <HAL_RCC_OscConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b74:	f000 f819 	bl	8000baa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b78:	230f      	movs	r3, #15
 8000b7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2102      	movs	r1, #2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fa6a 	bl	800206c <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b9e:	f000 f804 	bl	8000baa <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3740      	adds	r7, #64	@ 0x40
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bae:	b672      	cpsid	i
}
 8000bb0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb2:	bf00      	nop
 8000bb4:	e7fd      	b.n	8000bb2 <Error_Handler+0x8>
	...

08000bb8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000bbe:	4a18      	ldr	r2, [pc, #96]	@ (8000c20 <MX_SPI1_Init+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000bc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000be4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000be8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000bec:	2228      	movs	r2, #40	@ 0x28
 8000bee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000c04:	220a      	movs	r2, #10
 8000c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c08:	4804      	ldr	r0, [pc, #16]	@ (8000c1c <MX_SPI1_Init+0x64>)
 8000c0a:	f001 fbbd 	bl	8002388 <HAL_SPI_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c14:	f7ff ffc9 	bl	8000baa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000084 	.word	0x20000084
 8000c20:	40013000 	.word	0x40013000

08000c24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a47      	ldr	r2, [pc, #284]	@ (8000d5c <HAL_SPI_MspInit+0x138>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	f040 8086 	bne.w	8000d52 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c46:	4b46      	ldr	r3, [pc, #280]	@ (8000d60 <HAL_SPI_MspInit+0x13c>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	4a45      	ldr	r2, [pc, #276]	@ (8000d60 <HAL_SPI_MspInit+0x13c>)
 8000c4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c50:	6193      	str	r3, [r2, #24]
 8000c52:	4b43      	ldr	r3, [pc, #268]	@ (8000d60 <HAL_SPI_MspInit+0x13c>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b40      	ldr	r3, [pc, #256]	@ (8000d60 <HAL_SPI_MspInit+0x13c>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4a3f      	ldr	r2, [pc, #252]	@ (8000d60 <HAL_SPI_MspInit+0x13c>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6193      	str	r3, [r2, #24]
 8000c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d60 <HAL_SPI_MspInit+0x13c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c76:	23a0      	movs	r3, #160	@ 0xa0
 8000c78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0310 	add.w	r3, r7, #16
 8000c86:	4619      	mov	r1, r3
 8000c88:	4836      	ldr	r0, [pc, #216]	@ (8000d64 <HAL_SPI_MspInit+0x140>)
 8000c8a:	f000 fde9 	bl	8001860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c8e:	2340      	movs	r3, #64	@ 0x40
 8000c90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4830      	ldr	r0, [pc, #192]	@ (8000d64 <HAL_SPI_MspInit+0x140>)
 8000ca2:	f000 fddd 	bl	8001860 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000ca6:	4b30      	ldr	r3, [pc, #192]	@ (8000d68 <HAL_SPI_MspInit+0x144>)
 8000ca8:	4a30      	ldr	r2, [pc, #192]	@ (8000d6c <HAL_SPI_MspInit+0x148>)
 8000caa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cac:	4b2e      	ldr	r3, [pc, #184]	@ (8000d68 <HAL_SPI_MspInit+0x144>)
 8000cae:	2210      	movs	r2, #16
 8000cb0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <HAL_SPI_MspInit+0x144>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <HAL_SPI_MspInit+0x144>)
 8000cba:	2280      	movs	r2, #128	@ 0x80
 8000cbc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000d68 <HAL_SPI_MspInit+0x144>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cc4:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <HAL_SPI_MspInit+0x144>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cca:	4b27      	ldr	r3, [pc, #156]	@ (8000d68 <HAL_SPI_MspInit+0x144>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000cd0:	4b25      	ldr	r3, [pc, #148]	@ (8000d68 <HAL_SPI_MspInit+0x144>)
 8000cd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cd6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cd8:	4823      	ldr	r0, [pc, #140]	@ (8000d68 <HAL_SPI_MspInit+0x144>)
 8000cda:	f000 fb5b 	bl	8001394 <HAL_DMA_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8000ce4:	f7ff ff61 	bl	8000baa <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a1f      	ldr	r2, [pc, #124]	@ (8000d68 <HAL_SPI_MspInit+0x144>)
 8000cec:	649a      	str	r2, [r3, #72]	@ 0x48
 8000cee:	4a1e      	ldr	r2, [pc, #120]	@ (8000d68 <HAL_SPI_MspInit+0x144>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d70 <HAL_SPI_MspInit+0x14c>)
 8000cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d74 <HAL_SPI_MspInit+0x150>)
 8000cf8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <HAL_SPI_MspInit+0x14c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <HAL_SPI_MspInit+0x14c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <HAL_SPI_MspInit+0x14c>)
 8000d08:	2280      	movs	r2, #128	@ 0x80
 8000d0a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <HAL_SPI_MspInit+0x14c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <HAL_SPI_MspInit+0x14c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_SPI_MspInit+0x14c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <HAL_SPI_MspInit+0x14c>)
 8000d20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d24:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d26:	4812      	ldr	r0, [pc, #72]	@ (8000d70 <HAL_SPI_MspInit+0x14c>)
 8000d28:	f000 fb34 	bl	8001394 <HAL_DMA_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8000d32:	f7ff ff3a 	bl	8000baa <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a0d      	ldr	r2, [pc, #52]	@ (8000d70 <HAL_SPI_MspInit+0x14c>)
 8000d3a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d70 <HAL_SPI_MspInit+0x14c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6253      	str	r3, [r2, #36]	@ 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2105      	movs	r1, #5
 8000d46:	2023      	movs	r0, #35	@ 0x23
 8000d48:	f000 faed 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d4c:	2023      	movs	r0, #35	@ 0x23
 8000d4e:	f000 fb06 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d52:	bf00      	nop
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40013000 	.word	0x40013000
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010800 	.word	0x40010800
 8000d68:	200000dc 	.word	0x200000dc
 8000d6c:	40020030 	.word	0x40020030
 8000d70:	20000120 	.word	0x20000120
 8000d74:	4002001c 	.word	0x4002001c

08000d78 <HAL_SPI_TxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	 if (hspi == &hspi1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <HAL_SPI_TxCpltCallback+0x20>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d102      	bne.n	8000d8e <HAL_SPI_TxCpltCallback+0x16>
	 {
		 fSpi1EndTransmission = true;
 8000d88:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <HAL_SPI_TxCpltCallback+0x24>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
	 }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	20000084 	.word	0x20000084
 8000d9c:	20000080 	.word	0x20000080

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <HAL_MspInit+0x68>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <HAL_MspInit+0x68>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_MspInit+0x68>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <HAL_MspInit+0x68>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a11      	ldr	r2, [pc, #68]	@ (8000e08 <HAL_MspInit+0x68>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <HAL_MspInit+0x68>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	210f      	movs	r1, #15
 8000dda:	f06f 0001 	mvn.w	r0, #1
 8000dde:	f000 faa2 	bl	8001326 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e0c <HAL_MspInit+0x6c>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <HAL_MspInit+0x6c>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <NMI_Handler+0x4>

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <MemManage_Handler+0x4>

08000e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e48:	f000 f97a 	bl	8001140 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e4c:	f004 fc04 	bl	8005658 <xTaskGetSchedulerState>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d001      	beq.n	8000e5a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e56:	f005 fa77 	bl	8006348 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <DMA1_Channel2_IRQHandler+0x10>)
 8000e66:	f000 fbc7 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000120 	.word	0x20000120

08000e74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e78:	4802      	ldr	r0, [pc, #8]	@ (8000e84 <DMA1_Channel3_IRQHandler+0x10>)
 8000e7a:	f000 fbbd 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200000dc 	.word	0x200000dc

08000e88 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <DMA1_Channel4_IRQHandler+0x10>)
 8000e8e:	f000 fbb3 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200001f0 	.word	0x200001f0

08000e9c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ea0:	4802      	ldr	r0, [pc, #8]	@ (8000eac <DMA1_Channel5_IRQHandler+0x10>)
 8000ea2:	f000 fba9 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001ac 	.word	0x200001ac

08000eb0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <SPI1_IRQHandler+0x10>)
 8000eb6:	f001 fd5b 	bl	8002970 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000084 	.word	0x20000084

08000ec4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <MX_USART1_UART_Init+0x50>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_USART1_UART_Init+0x4c>)
 8000f08:	f002 f88a 	bl	8003020 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f12:	f7ff fe4a 	bl	8000baa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000164 	.word	0x20000164
 8000f20:	40013800 	.word	0x40013800

08000f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a43      	ldr	r2, [pc, #268]	@ (800104c <HAL_UART_MspInit+0x128>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d17f      	bne.n	8001044 <HAL_UART_MspInit+0x120>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f44:	4b42      	ldr	r3, [pc, #264]	@ (8001050 <HAL_UART_MspInit+0x12c>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a41      	ldr	r2, [pc, #260]	@ (8001050 <HAL_UART_MspInit+0x12c>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b3f      	ldr	r3, [pc, #252]	@ (8001050 <HAL_UART_MspInit+0x12c>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001050 <HAL_UART_MspInit+0x12c>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a3b      	ldr	r2, [pc, #236]	@ (8001050 <HAL_UART_MspInit+0x12c>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b39      	ldr	r3, [pc, #228]	@ (8001050 <HAL_UART_MspInit+0x12c>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4619      	mov	r1, r3
 8000f88:	4832      	ldr	r0, [pc, #200]	@ (8001054 <HAL_UART_MspInit+0x130>)
 8000f8a:	f000 fc69 	bl	8001860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	482c      	ldr	r0, [pc, #176]	@ (8001054 <HAL_UART_MspInit+0x130>)
 8000fa4:	f000 fc5c 	bl	8001860 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8001058 <HAL_UART_MspInit+0x134>)
 8000faa:	4a2c      	ldr	r2, [pc, #176]	@ (800105c <HAL_UART_MspInit+0x138>)
 8000fac:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <HAL_UART_MspInit+0x134>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb4:	4b28      	ldr	r3, [pc, #160]	@ (8001058 <HAL_UART_MspInit+0x134>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fba:	4b27      	ldr	r3, [pc, #156]	@ (8001058 <HAL_UART_MspInit+0x134>)
 8000fbc:	2280      	movs	r2, #128	@ 0x80
 8000fbe:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fc0:	4b25      	ldr	r3, [pc, #148]	@ (8001058 <HAL_UART_MspInit+0x134>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fc6:	4b24      	ldr	r3, [pc, #144]	@ (8001058 <HAL_UART_MspInit+0x134>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <HAL_UART_MspInit+0x134>)
 8000fce:	2220      	movs	r2, #32
 8000fd0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000fd2:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <HAL_UART_MspInit+0x134>)
 8000fd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fd8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fda:	481f      	ldr	r0, [pc, #124]	@ (8001058 <HAL_UART_MspInit+0x134>)
 8000fdc:	f000 f9da 	bl	8001394 <HAL_DMA_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000fe6:	f7ff fde0 	bl	8000baa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a1a      	ldr	r2, [pc, #104]	@ (8001058 <HAL_UART_MspInit+0x134>)
 8000fee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ff0:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <HAL_UART_MspInit+0x134>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <HAL_UART_MspInit+0x13c>)
 8000ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8001064 <HAL_UART_MspInit+0x140>)
 8000ffa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <HAL_UART_MspInit+0x13c>)
 8000ffe:	2210      	movs	r2, #16
 8001000:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001002:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <HAL_UART_MspInit+0x13c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001008:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_UART_MspInit+0x13c>)
 800100a:	2280      	movs	r2, #128	@ 0x80
 800100c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800100e:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <HAL_UART_MspInit+0x13c>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_UART_MspInit+0x13c>)
 8001016:	2200      	movs	r2, #0
 8001018:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800101a:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <HAL_UART_MspInit+0x13c>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001020:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_UART_MspInit+0x13c>)
 8001022:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001026:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001028:	480d      	ldr	r0, [pc, #52]	@ (8001060 <HAL_UART_MspInit+0x13c>)
 800102a:	f000 f9b3 	bl	8001394 <HAL_DMA_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8001034:	f7ff fdb9 	bl	8000baa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a09      	ldr	r2, [pc, #36]	@ (8001060 <HAL_UART_MspInit+0x13c>)
 800103c:	639a      	str	r2, [r3, #56]	@ 0x38
 800103e:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <HAL_UART_MspInit+0x13c>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40013800 	.word	0x40013800
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800
 8001058:	200001ac 	.word	0x200001ac
 800105c:	40020058 	.word	0x40020058
 8001060:	200001f0 	.word	0x200001f0
 8001064:	40020044 	.word	0x40020044

08001068 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001068:	f7ff ff2c 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800106c:	480b      	ldr	r0, [pc, #44]	@ (800109c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800106e:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001070:	4a0c      	ldr	r2, [pc, #48]	@ (80010a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001084:	4c09      	ldr	r4, [pc, #36]	@ (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001092:	f005 fbc3 	bl	800681c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001096:	f7ff fd31 	bl	8000afc <main>
  bx lr
 800109a:	4770      	bx	lr
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010a4:	08006948 	.word	0x08006948
  ldr r2, =_sbss
 80010a8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010ac:	20001b80 	.word	0x20001b80

080010b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC1_2_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <HAL_Init+0x28>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	@ (80010dc <HAL_Init+0x28>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f923 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fe66 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f93b 	bl	800137a <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f903 	bl	8001326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	@ (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000004 	.word	0x20000004
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000008 	.word	0x20000008

08001140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_IncTick+0x1c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_IncTick+0x20>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a03      	ldr	r2, [pc, #12]	@ (8001160 <HAL_IncTick+0x20>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	2000000c 	.word	0x2000000c
 8001160:	20000234 	.word	0x20000234

08001164 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b02      	ldr	r3, [pc, #8]	@ (8001174 <HAL_GetTick+0x10>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	20000234 	.word	0x20000234

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4906      	ldr	r1, [pc, #24]	@ (8001210 <__NVIC_EnableIRQ+0x34>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0a      	blt.n	800123e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	490c      	ldr	r1, [pc, #48]	@ (8001260 <__NVIC_SetPriority+0x4c>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	0112      	lsls	r2, r2, #4
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	440b      	add	r3, r1
 8001238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800123c:	e00a      	b.n	8001254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4908      	ldr	r1, [pc, #32]	@ (8001264 <__NVIC_SetPriority+0x50>)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 030f 	and.w	r3, r3, #15
 800124a:	3b04      	subs	r3, #4
 800124c:	0112      	lsls	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	440b      	add	r3, r1
 8001252:	761a      	strb	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000e100 	.word	0xe000e100
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	@ 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f1c3 0307 	rsb	r3, r3, #7
 8001282:	2b04      	cmp	r3, #4
 8001284:	bf28      	it	cs
 8001286:	2304      	movcs	r3, #4
 8001288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3304      	adds	r3, #4
 800128e:	2b06      	cmp	r3, #6
 8001290:	d902      	bls.n	8001298 <NVIC_EncodePriority+0x30>
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3b03      	subs	r3, #3
 8001296:	e000      	b.n	800129a <NVIC_EncodePriority+0x32>
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	f04f 32ff 	mov.w	r2, #4294967295
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	401a      	ands	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	4313      	orrs	r3, r2
         );
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3724      	adds	r7, #36	@ 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff90 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	@ (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff2d 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff42 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff90 	bl	8001268 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5f 	bl	8001214 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff35 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e043      	b.n	8001432 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <HAL_DMA_Init+0xa8>)
 80013b2:	4413      	add	r3, r2
 80013b4:	4a22      	ldr	r2, [pc, #136]	@ (8001440 <HAL_DMA_Init+0xac>)
 80013b6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	009a      	lsls	r2, r3, #2
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001444 <HAL_DMA_Init+0xb0>)
 80013c6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2202      	movs	r2, #2
 80013cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013de:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	bffdfff8 	.word	0xbffdfff8
 8001440:	cccccccd 	.word	0xcccccccd
 8001444:	40020000 	.word	0x40020000

08001448 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d101      	bne.n	8001468 <HAL_DMA_Start_IT+0x20>
 8001464:	2302      	movs	r3, #2
 8001466:	e04b      	b.n	8001500 <HAL_DMA_Start_IT+0xb8>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b01      	cmp	r3, #1
 800147a:	d13a      	bne.n	80014f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2202      	movs	r2, #2
 8001480:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0201 	bic.w	r2, r2, #1
 8001498:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	68b9      	ldr	r1, [r7, #8]
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 f9af 	bl	8001804 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d008      	beq.n	80014c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 020e 	orr.w	r2, r2, #14
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e00f      	b.n	80014e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0204 	bic.w	r2, r2, #4
 80014ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 020a 	orr.w	r2, r2, #10
 80014de:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e005      	b.n	80014fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014fa:	2302      	movs	r3, #2
 80014fc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d005      	beq.n	800152c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2204      	movs	r2, #4
 8001524:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e051      	b.n	80015d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 020e 	bic.w	r2, r2, #14
 800153a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0201 	bic.w	r2, r2, #1
 800154a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a22      	ldr	r2, [pc, #136]	@ (80015dc <HAL_DMA_Abort_IT+0xd4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d029      	beq.n	80015aa <HAL_DMA_Abort_IT+0xa2>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a21      	ldr	r2, [pc, #132]	@ (80015e0 <HAL_DMA_Abort_IT+0xd8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d022      	beq.n	80015a6 <HAL_DMA_Abort_IT+0x9e>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a1f      	ldr	r2, [pc, #124]	@ (80015e4 <HAL_DMA_Abort_IT+0xdc>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01a      	beq.n	80015a0 <HAL_DMA_Abort_IT+0x98>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1e      	ldr	r2, [pc, #120]	@ (80015e8 <HAL_DMA_Abort_IT+0xe0>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d012      	beq.n	800159a <HAL_DMA_Abort_IT+0x92>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <HAL_DMA_Abort_IT+0xe4>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00a      	beq.n	8001594 <HAL_DMA_Abort_IT+0x8c>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a1b      	ldr	r2, [pc, #108]	@ (80015f0 <HAL_DMA_Abort_IT+0xe8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d102      	bne.n	800158e <HAL_DMA_Abort_IT+0x86>
 8001588:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800158c:	e00e      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 800158e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001592:	e00b      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 8001594:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001598:	e008      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 800159a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800159e:	e005      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 80015a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a4:	e002      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 80015a6:	2310      	movs	r3, #16
 80015a8:	e000      	b.n	80015ac <HAL_DMA_Abort_IT+0xa4>
 80015aa:	2301      	movs	r3, #1
 80015ac:	4a11      	ldr	r2, [pc, #68]	@ (80015f4 <HAL_DMA_Abort_IT+0xec>)
 80015ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	4798      	blx	r3
    } 
  }
  return status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020008 	.word	0x40020008
 80015e0:	4002001c 	.word	0x4002001c
 80015e4:	40020030 	.word	0x40020030
 80015e8:	40020044 	.word	0x40020044
 80015ec:	40020058 	.word	0x40020058
 80015f0:	4002006c 	.word	0x4002006c
 80015f4:	40020000 	.word	0x40020000

080015f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	2204      	movs	r2, #4
 8001616:	409a      	lsls	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d04f      	beq.n	80016c0 <HAL_DMA_IRQHandler+0xc8>
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d04a      	beq.n	80016c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0320 	and.w	r3, r3, #32
 8001634:	2b00      	cmp	r3, #0
 8001636:	d107      	bne.n	8001648 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0204 	bic.w	r2, r2, #4
 8001646:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a66      	ldr	r2, [pc, #408]	@ (80017e8 <HAL_DMA_IRQHandler+0x1f0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d029      	beq.n	80016a6 <HAL_DMA_IRQHandler+0xae>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a65      	ldr	r2, [pc, #404]	@ (80017ec <HAL_DMA_IRQHandler+0x1f4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d022      	beq.n	80016a2 <HAL_DMA_IRQHandler+0xaa>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a63      	ldr	r2, [pc, #396]	@ (80017f0 <HAL_DMA_IRQHandler+0x1f8>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01a      	beq.n	800169c <HAL_DMA_IRQHandler+0xa4>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a62      	ldr	r2, [pc, #392]	@ (80017f4 <HAL_DMA_IRQHandler+0x1fc>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d012      	beq.n	8001696 <HAL_DMA_IRQHandler+0x9e>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a60      	ldr	r2, [pc, #384]	@ (80017f8 <HAL_DMA_IRQHandler+0x200>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d00a      	beq.n	8001690 <HAL_DMA_IRQHandler+0x98>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a5f      	ldr	r2, [pc, #380]	@ (80017fc <HAL_DMA_IRQHandler+0x204>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d102      	bne.n	800168a <HAL_DMA_IRQHandler+0x92>
 8001684:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001688:	e00e      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 800168a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800168e:	e00b      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 8001690:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001694:	e008      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 8001696:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800169a:	e005      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 800169c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016a0:	e002      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 80016a2:	2340      	movs	r3, #64	@ 0x40
 80016a4:	e000      	b.n	80016a8 <HAL_DMA_IRQHandler+0xb0>
 80016a6:	2304      	movs	r3, #4
 80016a8:	4a55      	ldr	r2, [pc, #340]	@ (8001800 <HAL_DMA_IRQHandler+0x208>)
 80016aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 8094 	beq.w	80017de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80016be:	e08e      	b.n	80017de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	2202      	movs	r2, #2
 80016c6:	409a      	lsls	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d056      	beq.n	800177e <HAL_DMA_IRQHandler+0x186>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d051      	beq.n	800177e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10b      	bne.n	8001700 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 020a 	bic.w	r2, r2, #10
 80016f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a38      	ldr	r2, [pc, #224]	@ (80017e8 <HAL_DMA_IRQHandler+0x1f0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d029      	beq.n	800175e <HAL_DMA_IRQHandler+0x166>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a37      	ldr	r2, [pc, #220]	@ (80017ec <HAL_DMA_IRQHandler+0x1f4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d022      	beq.n	800175a <HAL_DMA_IRQHandler+0x162>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a35      	ldr	r2, [pc, #212]	@ (80017f0 <HAL_DMA_IRQHandler+0x1f8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d01a      	beq.n	8001754 <HAL_DMA_IRQHandler+0x15c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a34      	ldr	r2, [pc, #208]	@ (80017f4 <HAL_DMA_IRQHandler+0x1fc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d012      	beq.n	800174e <HAL_DMA_IRQHandler+0x156>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a32      	ldr	r2, [pc, #200]	@ (80017f8 <HAL_DMA_IRQHandler+0x200>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d00a      	beq.n	8001748 <HAL_DMA_IRQHandler+0x150>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a31      	ldr	r2, [pc, #196]	@ (80017fc <HAL_DMA_IRQHandler+0x204>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d102      	bne.n	8001742 <HAL_DMA_IRQHandler+0x14a>
 800173c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001740:	e00e      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 8001742:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001746:	e00b      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 8001748:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800174c:	e008      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 800174e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001752:	e005      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 8001754:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001758:	e002      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 800175a:	2320      	movs	r3, #32
 800175c:	e000      	b.n	8001760 <HAL_DMA_IRQHandler+0x168>
 800175e:	2302      	movs	r3, #2
 8001760:	4a27      	ldr	r2, [pc, #156]	@ (8001800 <HAL_DMA_IRQHandler+0x208>)
 8001762:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001770:	2b00      	cmp	r3, #0
 8001772:	d034      	beq.n	80017de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800177c:	e02f      	b.n	80017de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	2208      	movs	r2, #8
 8001784:	409a      	lsls	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d028      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x1e8>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b00      	cmp	r3, #0
 8001796:	d023      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 020e 	bic.w	r2, r2, #14
 80017a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b0:	2101      	movs	r1, #1
 80017b2:	fa01 f202 	lsl.w	r2, r1, r2
 80017b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
    }
  }
  return;
 80017de:	bf00      	nop
 80017e0:	bf00      	nop
}
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020008 	.word	0x40020008
 80017ec:	4002001c 	.word	0x4002001c
 80017f0:	40020030 	.word	0x40020030
 80017f4:	40020044 	.word	0x40020044
 80017f8:	40020058 	.word	0x40020058
 80017fc:	4002006c 	.word	0x4002006c
 8001800:	40020000 	.word	0x40020000

08001804 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800181a:	2101      	movs	r1, #1
 800181c:	fa01 f202 	lsl.w	r2, r1, r2
 8001820:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b10      	cmp	r3, #16
 8001830:	d108      	bne.n	8001844 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001842:	e007      	b.n	8001854 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
	...

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b08b      	sub	sp, #44	@ 0x2c
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001872:	e169      	b.n	8001b48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001874:	2201      	movs	r2, #1
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 8158 	bne.w	8001b42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4a9a      	ldr	r2, [pc, #616]	@ (8001b00 <HAL_GPIO_Init+0x2a0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d05e      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 800189c:	4a98      	ldr	r2, [pc, #608]	@ (8001b00 <HAL_GPIO_Init+0x2a0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d875      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018a2:	4a98      	ldr	r2, [pc, #608]	@ (8001b04 <HAL_GPIO_Init+0x2a4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d058      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018a8:	4a96      	ldr	r2, [pc, #600]	@ (8001b04 <HAL_GPIO_Init+0x2a4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d86f      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018ae:	4a96      	ldr	r2, [pc, #600]	@ (8001b08 <HAL_GPIO_Init+0x2a8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d052      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018b4:	4a94      	ldr	r2, [pc, #592]	@ (8001b08 <HAL_GPIO_Init+0x2a8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d869      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018ba:	4a94      	ldr	r2, [pc, #592]	@ (8001b0c <HAL_GPIO_Init+0x2ac>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d04c      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018c0:	4a92      	ldr	r2, [pc, #584]	@ (8001b0c <HAL_GPIO_Init+0x2ac>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d863      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018c6:	4a92      	ldr	r2, [pc, #584]	@ (8001b10 <HAL_GPIO_Init+0x2b0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d046      	beq.n	800195a <HAL_GPIO_Init+0xfa>
 80018cc:	4a90      	ldr	r2, [pc, #576]	@ (8001b10 <HAL_GPIO_Init+0x2b0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d85d      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018d2:	2b12      	cmp	r3, #18
 80018d4:	d82a      	bhi.n	800192c <HAL_GPIO_Init+0xcc>
 80018d6:	2b12      	cmp	r3, #18
 80018d8:	d859      	bhi.n	800198e <HAL_GPIO_Init+0x12e>
 80018da:	a201      	add	r2, pc, #4	@ (adr r2, 80018e0 <HAL_GPIO_Init+0x80>)
 80018dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e0:	0800195b 	.word	0x0800195b
 80018e4:	08001935 	.word	0x08001935
 80018e8:	08001947 	.word	0x08001947
 80018ec:	08001989 	.word	0x08001989
 80018f0:	0800198f 	.word	0x0800198f
 80018f4:	0800198f 	.word	0x0800198f
 80018f8:	0800198f 	.word	0x0800198f
 80018fc:	0800198f 	.word	0x0800198f
 8001900:	0800198f 	.word	0x0800198f
 8001904:	0800198f 	.word	0x0800198f
 8001908:	0800198f 	.word	0x0800198f
 800190c:	0800198f 	.word	0x0800198f
 8001910:	0800198f 	.word	0x0800198f
 8001914:	0800198f 	.word	0x0800198f
 8001918:	0800198f 	.word	0x0800198f
 800191c:	0800198f 	.word	0x0800198f
 8001920:	0800198f 	.word	0x0800198f
 8001924:	0800193d 	.word	0x0800193d
 8001928:	08001951 	.word	0x08001951
 800192c:	4a79      	ldr	r2, [pc, #484]	@ (8001b14 <HAL_GPIO_Init+0x2b4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001932:	e02c      	b.n	800198e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	623b      	str	r3, [r7, #32]
          break;
 800193a:	e029      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	3304      	adds	r3, #4
 8001942:	623b      	str	r3, [r7, #32]
          break;
 8001944:	e024      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	3308      	adds	r3, #8
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e01f      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	330c      	adds	r3, #12
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e01a      	b.n	8001990 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001962:	2304      	movs	r3, #4
 8001964:	623b      	str	r3, [r7, #32]
          break;
 8001966:	e013      	b.n	8001990 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d105      	bne.n	800197c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001970:	2308      	movs	r3, #8
 8001972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	611a      	str	r2, [r3, #16]
          break;
 800197a:	e009      	b.n	8001990 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800197c:	2308      	movs	r3, #8
 800197e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69fa      	ldr	r2, [r7, #28]
 8001984:	615a      	str	r2, [r3, #20]
          break;
 8001986:	e003      	b.n	8001990 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001988:	2300      	movs	r3, #0
 800198a:	623b      	str	r3, [r7, #32]
          break;
 800198c:	e000      	b.n	8001990 <HAL_GPIO_Init+0x130>
          break;
 800198e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	2bff      	cmp	r3, #255	@ 0xff
 8001994:	d801      	bhi.n	800199a <HAL_GPIO_Init+0x13a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	e001      	b.n	800199e <HAL_GPIO_Init+0x13e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2bff      	cmp	r3, #255	@ 0xff
 80019a4:	d802      	bhi.n	80019ac <HAL_GPIO_Init+0x14c>
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	e002      	b.n	80019b2 <HAL_GPIO_Init+0x152>
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	3b08      	subs	r3, #8
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	210f      	movs	r1, #15
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	401a      	ands	r2, r3
 80019c4:	6a39      	ldr	r1, [r7, #32]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	431a      	orrs	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80b1 	beq.w	8001b42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001b18 <HAL_GPIO_Init+0x2b8>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001b18 <HAL_GPIO_Init+0x2b8>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001b18 <HAL_GPIO_Init+0x2b8>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019f8:	4a48      	ldr	r2, [pc, #288]	@ (8001b1c <HAL_GPIO_Init+0x2bc>)
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a40      	ldr	r2, [pc, #256]	@ (8001b20 <HAL_GPIO_Init+0x2c0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_GPIO_Init+0x1ec>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a3f      	ldr	r2, [pc, #252]	@ (8001b24 <HAL_GPIO_Init+0x2c4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d00d      	beq.n	8001a48 <HAL_GPIO_Init+0x1e8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b28 <HAL_GPIO_Init+0x2c8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d007      	beq.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a3d      	ldr	r2, [pc, #244]	@ (8001b2c <HAL_GPIO_Init+0x2cc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_GPIO_Init+0x1e0>
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e006      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a40:	2304      	movs	r3, #4
 8001a42:	e004      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e002      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <HAL_GPIO_Init+0x1ee>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a50:	f002 0203 	and.w	r2, r2, #3
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	4093      	lsls	r3, r2
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a5e:	492f      	ldr	r1, [pc, #188]	@ (8001b1c <HAL_GPIO_Init+0x2bc>)
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3302      	adds	r3, #2
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d006      	beq.n	8001a86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a78:	4b2d      	ldr	r3, [pc, #180]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	492c      	ldr	r1, [pc, #176]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	608b      	str	r3, [r1, #8]
 8001a84:	e006      	b.n	8001a94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a86:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	4928      	ldr	r1, [pc, #160]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa0:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	4922      	ldr	r1, [pc, #136]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60cb      	str	r3, [r1, #12]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aae:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	491e      	ldr	r1, [pc, #120]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4918      	ldr	r1, [pc, #96]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ad6:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4914      	ldr	r1, [pc, #80]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d021      	beq.n	8001b34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	490e      	ldr	r1, [pc, #56]	@ (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
 8001afc:	e021      	b.n	8001b42 <HAL_GPIO_Init+0x2e2>
 8001afe:	bf00      	nop
 8001b00:	10320000 	.word	0x10320000
 8001b04:	10310000 	.word	0x10310000
 8001b08:	10220000 	.word	0x10220000
 8001b0c:	10210000 	.word	0x10210000
 8001b10:	10120000 	.word	0x10120000
 8001b14:	10110000 	.word	0x10110000
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40010000 	.word	0x40010000
 8001b20:	40010800 	.word	0x40010800
 8001b24:	40010c00 	.word	0x40010c00
 8001b28:	40011000 	.word	0x40011000
 8001b2c:	40011400 	.word	0x40011400
 8001b30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_GPIO_Init+0x304>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	4909      	ldr	r1, [pc, #36]	@ (8001b64 <HAL_GPIO_Init+0x304>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	3301      	adds	r3, #1
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f47f ae8e 	bne.w	8001874 <HAL_GPIO_Init+0x14>
  }
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	372c      	adds	r7, #44	@ 0x2c
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e272      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8087 	beq.w	8001c96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b88:	4b92      	ldr	r3, [pc, #584]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d00c      	beq.n	8001bae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b94:	4b8f      	ldr	r3, [pc, #572]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d112      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x5e>
 8001ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bac:	d10b      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bae:	4b89      	ldr	r3, [pc, #548]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d06c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x12c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d168      	bne.n	8001c94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e24c      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x76>
 8001bd0:	4b80      	ldr	r3, [pc, #512]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a7f      	ldr	r2, [pc, #508]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	e02e      	b.n	8001c3c <HAL_RCC_OscConfig+0xd4>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10c      	bne.n	8001c00 <HAL_RCC_OscConfig+0x98>
 8001be6:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a7a      	ldr	r2, [pc, #488]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b78      	ldr	r3, [pc, #480]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a77      	ldr	r2, [pc, #476]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e01d      	b.n	8001c3c <HAL_RCC_OscConfig+0xd4>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0xbc>
 8001c0a:	4b72      	ldr	r3, [pc, #456]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a71      	ldr	r2, [pc, #452]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	4b6f      	ldr	r3, [pc, #444]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6e      	ldr	r2, [pc, #440]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	e00b      	b.n	8001c3c <HAL_RCC_OscConfig+0xd4>
 8001c24:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a6a      	ldr	r2, [pc, #424]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b68      	ldr	r3, [pc, #416]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a67      	ldr	r2, [pc, #412]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fa8e 	bl	8001164 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7ff fa8a 	bl	8001164 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	@ 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e200      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0xe4>
 8001c6a:	e014      	b.n	8001c96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fa7a 	bl	8001164 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff fa76 	bl	8001164 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	@ 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e1ec      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c86:	4b53      	ldr	r3, [pc, #332]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x10c>
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d063      	beq.n	8001d6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00b      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cae:	4b49      	ldr	r3, [pc, #292]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d11c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x18c>
 8001cba:	4b46      	ldr	r3, [pc, #280]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d116      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	4b43      	ldr	r3, [pc, #268]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x176>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e1c0      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cde:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4939      	ldr	r1, [pc, #228]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf2:	e03a      	b.n	8001d6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d020      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cfc:	4b36      	ldr	r3, [pc, #216]	@ (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fa2f 	bl	8001164 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fa2b 	bl	8001164 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e1a1      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4927      	ldr	r1, [pc, #156]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]
 8001d3c:	e015      	b.n	8001d6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3e:	4b26      	ldr	r3, [pc, #152]	@ (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fa0e 	bl	8001164 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4c:	f7ff fa0a 	bl	8001164 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e180      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d03a      	beq.n	8001dec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d019      	beq.n	8001db2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7e:	4b17      	ldr	r3, [pc, #92]	@ (8001ddc <HAL_RCC_OscConfig+0x274>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7ff f9ee 	bl	8001164 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7ff f9ea 	bl	8001164 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e160      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001daa:	2001      	movs	r0, #1
 8001dac:	f000 face 	bl	800234c <RCC_Delay>
 8001db0:	e01c      	b.n	8001dec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_RCC_OscConfig+0x274>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff f9d4 	bl	8001164 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dbe:	e00f      	b.n	8001de0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f9d0 	bl	8001164 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d908      	bls.n	8001de0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e146      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	42420000 	.word	0x42420000
 8001ddc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de0:	4b92      	ldr	r3, [pc, #584]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e9      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80a6 	beq.w	8001f46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfe:	4b8b      	ldr	r3, [pc, #556]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10d      	bne.n	8001e26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b88      	ldr	r3, [pc, #544]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a87      	ldr	r2, [pc, #540]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e14:	61d3      	str	r3, [r2, #28]
 8001e16:	4b85      	ldr	r3, [pc, #532]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e22:	2301      	movs	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4b82      	ldr	r3, [pc, #520]	@ (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d118      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e32:	4b7f      	ldr	r3, [pc, #508]	@ (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7e      	ldr	r2, [pc, #504]	@ (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff f991 	bl	8001164 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e46:	f7ff f98d 	bl	8001164 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b64      	cmp	r3, #100	@ 0x64
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e103      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	4b75      	ldr	r3, [pc, #468]	@ (8002030 <HAL_RCC_OscConfig+0x4c8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x312>
 8001e6c:	4b6f      	ldr	r3, [pc, #444]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	4a6e      	ldr	r2, [pc, #440]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	6213      	str	r3, [r2, #32]
 8001e78:	e02d      	b.n	8001ed6 <HAL_RCC_OscConfig+0x36e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x334>
 8001e82:	4b6a      	ldr	r3, [pc, #424]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a69      	ldr	r2, [pc, #420]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	4b67      	ldr	r3, [pc, #412]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a66      	ldr	r2, [pc, #408]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	6213      	str	r3, [r2, #32]
 8001e9a:	e01c      	b.n	8001ed6 <HAL_RCC_OscConfig+0x36e>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d10c      	bne.n	8001ebe <HAL_RCC_OscConfig+0x356>
 8001ea4:	4b61      	ldr	r3, [pc, #388]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a60      	ldr	r2, [pc, #384]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	4b5e      	ldr	r3, [pc, #376]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	4a5d      	ldr	r2, [pc, #372]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6213      	str	r3, [r2, #32]
 8001ebc:	e00b      	b.n	8001ed6 <HAL_RCC_OscConfig+0x36e>
 8001ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a5a      	ldr	r2, [pc, #360]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6213      	str	r3, [r2, #32]
 8001eca:	4b58      	ldr	r3, [pc, #352]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4a57      	ldr	r2, [pc, #348]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d015      	beq.n	8001f0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7ff f941 	bl	8001164 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7ff f93d 	bl	8001164 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0b1      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	4b4b      	ldr	r3, [pc, #300]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0ee      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x37e>
 8001f08:	e014      	b.n	8001f34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff f92b 	bl	8001164 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7ff f927 	bl	8001164 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e09b      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f28:	4b40      	ldr	r3, [pc, #256]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1ee      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d105      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a3b      	ldr	r2, [pc, #236]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8087 	beq.w	800205e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f50:	4b36      	ldr	r3, [pc, #216]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b08      	cmp	r3, #8
 8001f5a:	d061      	beq.n	8002020 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d146      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f64:	4b33      	ldr	r3, [pc, #204]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff f8fb 	bl	8001164 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f72:	f7ff f8f7 	bl	8001164 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e06d      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f84:	4b29      	ldr	r3, [pc, #164]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f0      	bne.n	8001f72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f98:	d108      	bne.n	8001fac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f9a:	4b24      	ldr	r3, [pc, #144]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	4921      	ldr	r1, [pc, #132]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fac:	4b1f      	ldr	r3, [pc, #124]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a19      	ldr	r1, [r3, #32]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	430b      	orrs	r3, r1
 8001fbe:	491b      	ldr	r1, [pc, #108]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff f8cb 	bl	8001164 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7ff f8c7 	bl	8001164 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e03d      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe4:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x46a>
 8001ff0:	e035      	b.n	800205e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <HAL_RCC_OscConfig+0x4cc>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f8b4 	bl	8001164 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002000:	f7ff f8b0 	bl	8001164 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e026      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_RCC_OscConfig+0x4c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x498>
 800201e:	e01e      	b.n	800205e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d107      	bne.n	8002038 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e019      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
 8002034:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_RCC_OscConfig+0x500>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	429a      	cmp	r2, r3
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0d0      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002080:	4b6a      	ldr	r3, [pc, #424]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d910      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b67      	ldr	r3, [pc, #412]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 0207 	bic.w	r2, r3, #7
 8002096:	4965      	ldr	r1, [pc, #404]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b63      	ldr	r3, [pc, #396]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b8      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c8:	4b59      	ldr	r3, [pc, #356]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a58      	ldr	r2, [pc, #352]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e0:	4b53      	ldr	r3, [pc, #332]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a52      	ldr	r2, [pc, #328]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b50      	ldr	r3, [pc, #320]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	494d      	ldr	r1, [pc, #308]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d040      	beq.n	800218c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b47      	ldr	r3, [pc, #284]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d115      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e07f      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	4b41      	ldr	r3, [pc, #260]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e073      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213a:	4b3d      	ldr	r3, [pc, #244]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e06b      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214a:	4b39      	ldr	r3, [pc, #228]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f023 0203 	bic.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4936      	ldr	r1, [pc, #216]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800215c:	f7ff f802 	bl	8001164 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	e00a      	b.n	800217a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	f7fe fffe 	bl	8001164 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e053      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 020c 	and.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	429a      	cmp	r2, r3
 800218a:	d1eb      	bne.n	8002164 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800218c:	4b27      	ldr	r3, [pc, #156]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d210      	bcs.n	80021bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b24      	ldr	r3, [pc, #144]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 0207 	bic.w	r2, r3, #7
 80021a2:	4922      	ldr	r1, [pc, #136]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b20      	ldr	r3, [pc, #128]	@ (800222c <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e032      	b.n	8002222 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c8:	4b19      	ldr	r3, [pc, #100]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4916      	ldr	r1, [pc, #88]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0308 	and.w	r3, r3, #8
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021e6:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	490e      	ldr	r1, [pc, #56]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021fa:	f000 f821 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	490a      	ldr	r1, [pc, #40]	@ (8002234 <HAL_RCC_ClockConfig+0x1c8>)
 800220c:	5ccb      	ldrb	r3, [r1, r3]
 800220e:	fa22 f303 	lsr.w	r3, r2, r3
 8002212:	4a09      	ldr	r2, [pc, #36]	@ (8002238 <HAL_RCC_ClockConfig+0x1cc>)
 8002214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <HAL_RCC_ClockConfig+0x1d0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe ff60 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40022000 	.word	0x40022000
 8002230:	40021000 	.word	0x40021000
 8002234:	0800690c 	.word	0x0800690c
 8002238:	20000004 	.word	0x20000004
 800223c:	20000008 	.word	0x20000008

08002240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800225a:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b04      	cmp	r3, #4
 8002268:	d002      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x30>
 800226a:	2b08      	cmp	r3, #8
 800226c:	d003      	beq.n	8002276 <HAL_RCC_GetSysClockFreq+0x36>
 800226e:	e027      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002270:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002272:	613b      	str	r3, [r7, #16]
      break;
 8002274:	e027      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	0c9b      	lsrs	r3, r3, #18
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	4a17      	ldr	r2, [pc, #92]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002280:	5cd3      	ldrb	r3, [r2, r3]
 8002282:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	0c5b      	lsrs	r3, r3, #17
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	4a11      	ldr	r2, [pc, #68]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a0d      	ldr	r2, [pc, #52]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022a2:	fb03 f202 	mul.w	r2, r3, r2
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e004      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a0c      	ldr	r2, [pc, #48]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	613b      	str	r3, [r7, #16]
      break;
 80022be:	e002      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c0:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022c2:	613b      	str	r3, [r7, #16]
      break;
 80022c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c6:	693b      	ldr	r3, [r7, #16]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000
 80022d8:	007a1200 	.word	0x007a1200
 80022dc:	08006924 	.word	0x08006924
 80022e0:	08006934 	.word	0x08006934
 80022e4:	003d0900 	.word	0x003d0900

080022e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022ec:	4b02      	ldr	r3, [pc, #8]	@ (80022f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	20000004 	.word	0x20000004

080022fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002300:	f7ff fff2 	bl	80022e8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4903      	ldr	r1, [pc, #12]	@ (8002320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	0800691c 	.word	0x0800691c

08002324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002328:	f7ff ffde 	bl	80022e8 <HAL_RCC_GetHCLKFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	0adb      	lsrs	r3, r3, #11
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4903      	ldr	r1, [pc, #12]	@ (8002348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	0800691c 	.word	0x0800691c

0800234c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002354:	4b0a      	ldr	r3, [pc, #40]	@ (8002380 <RCC_Delay+0x34>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <RCC_Delay+0x38>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0a5b      	lsrs	r3, r3, #9
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002368:	bf00      	nop
  }
  while (Delay --);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1e5a      	subs	r2, r3, #1
 800236e:	60fa      	str	r2, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f9      	bne.n	8002368 <RCC_Delay+0x1c>
}
 8002374:	bf00      	nop
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	20000004 	.word	0x20000004
 8002384:	10624dd3 	.word	0x10624dd3

08002388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e076      	b.n	8002488 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d108      	bne.n	80023b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023aa:	d009      	beq.n	80023c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
 80023b2:	e005      	b.n	80023c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7fe fc22 	bl	8000c24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002444:	ea42 0103 	orr.w	r1, r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	0c1a      	lsrs	r2, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f002 0204 	and.w	r2, r2, #4
 8002466:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002476:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	4613      	mov	r3, r2
 800249c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_SPI_Transmit_DMA+0x20>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e097      	b.n	80025e0 <HAL_SPI_Transmit_DMA+0x150>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d002      	beq.n	80024ca <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
 80024c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024c8:	e085      	b.n	80025d6 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d002      	beq.n	80024d6 <HAL_SPI_Transmit_DMA+0x46>
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d102      	bne.n	80024dc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024da:	e07c      	b.n	80025d6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2203      	movs	r2, #3
 80024e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	88fa      	ldrh	r2, [r7, #6]
 80024fa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2200      	movs	r2, #0
 800250c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002522:	d10f      	bne.n	8002544 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002532:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002542:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002548:	4a27      	ldr	r2, [pc, #156]	@ (80025e8 <HAL_SPI_Transmit_DMA+0x158>)
 800254a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002550:	4a26      	ldr	r2, [pc, #152]	@ (80025ec <HAL_SPI_Transmit_DMA+0x15c>)
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002558:	4a25      	ldr	r2, [pc, #148]	@ (80025f0 <HAL_SPI_Transmit_DMA+0x160>)
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002560:	2200      	movs	r2, #0
 8002562:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256c:	4619      	mov	r1, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	330c      	adds	r3, #12
 8002574:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800257a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800257c:	f7fe ff64 	bl	8001448 <HAL_DMA_Start_IT>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258a:	f043 0210 	orr.w	r2, r3, #16
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002596:	e01e      	b.n	80025d6 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a2:	2b40      	cmp	r3, #64	@ 0x40
 80025a4:	d007      	beq.n	80025b6 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0220 	orr.w	r2, r2, #32
 80025c4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0202 	orr.w	r2, r2, #2
 80025d4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80025de:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	08002d73 	.word	0x08002d73
 80025ec:	08002b99 	.word	0x08002b99
 80025f0:	08002dc7 	.word	0x08002dc7

080025f4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d002      	beq.n	8002618 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8002612:	2302      	movs	r3, #2
 8002614:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002616:	e0a2      	b.n	800275e <HAL_SPI_Receive_DMA+0x16a>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d110      	bne.n	8002642 <HAL_SPI_Receive_DMA+0x4e>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002628:	d10b      	bne.n	8002642 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2204      	movs	r2, #4
 800262e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f89f 	bl	800277c <HAL_SPI_TransmitReceive_DMA>
 800263e:	4603      	mov	r3, r0
 8002640:	e092      	b.n	8002768 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_SPI_Receive_DMA+0x5c>
 800264c:	2302      	movs	r3, #2
 800264e:	e08b      	b.n	8002768 <HAL_SPI_Receive_DMA+0x174>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_SPI_Receive_DMA+0x70>
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002668:	e079      	b.n	800275e <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2204      	movs	r2, #4
 800266e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	88fa      	ldrh	r2, [r7, #6]
 8002682:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	88fa      	ldrh	r2, [r7, #6]
 8002688:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026aa:	d10f      	bne.n	80026cc <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d0:	4a27      	ldr	r2, [pc, #156]	@ (8002770 <HAL_SPI_Receive_DMA+0x17c>)
 80026d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d8:	4a26      	ldr	r2, [pc, #152]	@ (8002774 <HAL_SPI_Receive_DMA+0x180>)
 80026da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e0:	4a25      	ldr	r2, [pc, #148]	@ (8002778 <HAL_SPI_Receive_DMA+0x184>)
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e8:	2200      	movs	r2, #0
 80026ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	4619      	mov	r1, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002702:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002704:	f7fe fea0 	bl	8001448 <HAL_DMA_Start_IT>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d008      	beq.n	8002720 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002712:	f043 0210 	orr.w	r2, r3, #16
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]

    goto error;
 800271e:	e01e      	b.n	800275e <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272a:	2b40      	cmp	r3, #64	@ 0x40
 800272c:	d007      	beq.n	800273e <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0220 	orr.w	r2, r2, #32
 800274c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f042 0201 	orr.w	r2, r2, #1
 800275c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002766:	7dfb      	ldrb	r3, [r7, #23]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	08002d8f 	.word	0x08002d8f
 8002774:	08002c3f 	.word	0x08002c3f
 8002778:	08002dc7 	.word	0x08002dc7

0800277c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_SPI_TransmitReceive_DMA+0x20>
 8002798:	2302      	movs	r3, #2
 800279a:	e0db      	b.n	8002954 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027aa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80027b2:	7dbb      	ldrb	r3, [r7, #22]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d00d      	beq.n	80027d4 <HAL_SPI_TransmitReceive_DMA+0x58>
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027be:	d106      	bne.n	80027ce <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <HAL_SPI_TransmitReceive_DMA+0x52>
 80027c8:	7dbb      	ldrb	r3, [r7, #22]
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d002      	beq.n	80027d4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
 80027d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027d2:	e0ba      	b.n	800294a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80027e0:	887b      	ldrh	r3, [r7, #2]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027ea:	e0ae      	b.n	800294a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d003      	beq.n	8002800 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2205      	movs	r2, #5
 80027fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	887a      	ldrh	r2, [r7, #2]
 8002816:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	887a      	ldrh	r2, [r7, #2]
 8002822:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b04      	cmp	r3, #4
 8002840:	d108      	bne.n	8002854 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002846:	4a45      	ldr	r2, [pc, #276]	@ (800295c <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8002848:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284e:	4a44      	ldr	r2, [pc, #272]	@ (8002960 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8002850:	629a      	str	r2, [r3, #40]	@ 0x28
 8002852:	e007      	b.n	8002864 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002858:	4a42      	ldr	r2, [pc, #264]	@ (8002964 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800285a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002860:	4a41      	ldr	r2, [pc, #260]	@ (8002968 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8002862:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002868:	4a40      	ldr	r2, [pc, #256]	@ (800296c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002870:	2200      	movs	r2, #0
 8002872:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	4619      	mov	r1, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002884:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800288a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800288c:	f7fe fddc 	bl	8001448 <HAL_DMA_Start_IT>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289a:	f043 0210 	orr.w	r2, r3, #16
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]

    goto error;
 80028a6:	e050      	b.n	800294a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028bc:	2200      	movs	r2, #0
 80028be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c4:	2200      	movs	r2, #0
 80028c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d4:	2200      	movs	r2, #0
 80028d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e0:	4619      	mov	r1, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80028f0:	f7fe fdaa 	bl	8001448 <HAL_DMA_Start_IT>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	f043 0210 	orr.w	r2, r3, #16
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]

    goto error;
 800290a:	e01e      	b.n	800294a <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002916:	2b40      	cmp	r3, #64	@ 0x40
 8002918:	d007      	beq.n	800292a <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002928:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0220 	orr.w	r2, r2, #32
 8002938:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0202 	orr.w	r2, r2, #2
 8002948:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002952:	7dfb      	ldrb	r3, [r7, #23]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	08002d8f 	.word	0x08002d8f
 8002960:	08002c3f 	.word	0x08002c3f
 8002964:	08002dab 	.word	0x08002dab
 8002968:	08002ce5 	.word	0x08002ce5
 800296c:	08002dc7 	.word	0x08002dc7

08002970 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10e      	bne.n	80029b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d004      	beq.n	80029b0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	4798      	blx	r3
    return;
 80029ae:	e0b7      	b.n	8002b20 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_SPI_IRQHandler+0x5e>
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4798      	blx	r3
    return;
 80029cc:	e0a8      	b.n	8002b20 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d105      	bne.n	80029e4 <HAL_SPI_IRQHandler+0x74>
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 809e 	beq.w	8002b20 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8098 	beq.w	8002b20 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d023      	beq.n	8002a42 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d011      	beq.n	8002a2a <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0a:	f043 0204 	orr.w	r2, r3, #4
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	e00b      	b.n	8002a42 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	693b      	ldr	r3, [r7, #16]
        return;
 8002a40:	e06e      	b.n	8002b20 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d014      	beq.n	8002a76 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d04f      	beq.n	8002b1e <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a8c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d104      	bne.n	8002aaa <HAL_SPI_IRQHandler+0x13a>
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d034      	beq.n	8002b14 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0203 	bic.w	r2, r2, #3
 8002ab8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d011      	beq.n	8002ae6 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac6:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <HAL_SPI_IRQHandler+0x1b8>)
 8002ac8:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fd1a 	bl	8001508 <HAL_DMA_Abort_IT>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ade:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d016      	beq.n	8002b1c <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af2:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <HAL_SPI_IRQHandler+0x1b8>)
 8002af4:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fd04 	bl	8001508 <HAL_DMA_Abort_IT>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002b12:	e003      	b.n	8002b1c <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f836 	bl	8002b86 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b1a:	e000      	b.n	8002b1e <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8002b1c:	bf00      	nop
    return;
 8002b1e:	bf00      	nop
  }
}
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	08002e07 	.word	0x08002e07

08002b2c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ba6:	f7fe fadd 	bl	8001164 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d03b      	beq.n	8002c32 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0220 	bic.w	r2, r2, #32
 8002bc8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0202 	bic.w	r2, r2, #2
 8002bd8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	2164      	movs	r1, #100	@ 0x64
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f000 fa00 	bl	8002fe4 <SPI_EndRxTxTransaction>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2200      	movs	r2, #0
 8002c18:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f7ff ffab 	bl	8002b86 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002c30:	e002      	b.n	8002c38 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002c32:	6978      	ldr	r0, [r7, #20]
 8002c34:	f7fe f8a0 	bl	8000d78 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c4c:	f7fe fa8a 	bl	8001164 <HAL_GetTick>
 8002c50:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d03b      	beq.n	8002cd8 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0220 	bic.w	r2, r2, #32
 8002c6e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10d      	bne.n	8002c94 <SPI_DMAReceiveCplt+0x56>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c80:	d108      	bne.n	8002c94 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0203 	bic.w	r2, r2, #3
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	e007      	b.n	8002ca4 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	2164      	movs	r1, #100	@ 0x64
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f949 	bl	8002f40 <SPI_EndRxTransaction>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f7ff ff58 	bl	8002b86 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002cd6:	e002      	b.n	8002cde <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7ff ff27 	bl	8002b2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cf2:	f7fe fa37 	bl	8001164 <HAL_GetTick>
 8002cf6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d02f      	beq.n	8002d66 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0220 	bic.w	r2, r2, #32
 8002d14:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	2164      	movs	r1, #100	@ 0x64
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f962 	bl	8002fe4 <SPI_EndRxTxTransaction>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0203 	bic.w	r2, r2, #3
 8002d40:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7ff ff11 	bl	8002b86 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d64:	e002      	b.n	8002d6c <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff fee9 	bl	8002b3e <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff fee5 	bl	8002b50 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff fee0 	bl	8002b62 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff fedb 	bl	8002b74 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0203 	bic.w	r2, r2, #3
 8002de2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de8:	f043 0210 	orr.w	r2, r3, #16
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff fec4 	bl	8002b86 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f7ff feb0 	bl	8002b86 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b088      	sub	sp, #32
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e40:	f7fe f990 	bl	8001164 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e50:	f7fe f988 	bl	8001164 <HAL_GetTick>
 8002e54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e56:	4b39      	ldr	r3, [pc, #228]	@ (8002f3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	015b      	lsls	r3, r3, #5
 8002e5c:	0d1b      	lsrs	r3, r3, #20
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e66:	e054      	b.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d050      	beq.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e70:	f7fe f978 	bl	8001164 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d902      	bls.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d13d      	bne.n	8002f02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e9e:	d111      	bne.n	8002ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ea8:	d004      	beq.n	8002eb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eb2:	d107      	bne.n	8002ec4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ec2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ecc:	d10f      	bne.n	8002eee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002eec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e017      	b.n	8002f32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d19b      	bne.n	8002e68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3720      	adds	r7, #32
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000004 	.word	0x20000004

08002f40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f54:	d111      	bne.n	8002f7a <SPI_EndRxTransaction+0x3a>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f5e:	d004      	beq.n	8002f6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f68:	d107      	bne.n	8002f7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f78:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f82:	d117      	bne.n	8002fb4 <SPI_EndRxTransaction+0x74>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f8c:	d112      	bne.n	8002fb4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2101      	movs	r1, #1
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7ff ff49 	bl	8002e30 <SPI_WaitFlagStateUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01a      	beq.n	8002fda <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	f043 0220 	orr.w	r2, r3, #32
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e013      	b.n	8002fdc <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2180      	movs	r1, #128	@ 0x80
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f7ff ff36 	bl	8002e30 <SPI_WaitFlagStateUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e000      	b.n	8002fdc <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af02      	add	r7, sp, #8
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2180      	movs	r1, #128	@ 0x80
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f7ff ff18 	bl	8002e30 <SPI_WaitFlagStateUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e000      	b.n	8003018 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e042      	b.n	80030b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd ff6c 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2224      	movs	r2, #36	@ 0x24
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fb75 	bl	8003754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695a      	ldr	r2, [r3, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	@ 0x30
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d156      	bne.n	8003188 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_UART_Transmit_DMA+0x26>
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e04f      	b.n	800318a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	88fa      	ldrh	r2, [r7, #6]
 80030f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2221      	movs	r2, #33	@ 0x21
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310e:	4a21      	ldr	r2, [pc, #132]	@ (8003194 <HAL_UART_Transmit_DMA+0xd4>)
 8003110:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003116:	4a20      	ldr	r2, [pc, #128]	@ (8003198 <HAL_UART_Transmit_DMA+0xd8>)
 8003118:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311e:	4a1f      	ldr	r2, [pc, #124]	@ (800319c <HAL_UART_Transmit_DMA+0xdc>)
 8003120:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003126:	2200      	movs	r2, #0
 8003128:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800312a:	f107 0308 	add.w	r3, r7, #8
 800312e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3304      	adds	r3, #4
 800313e:	461a      	mov	r2, r3
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	f7fe f981 	bl	8001448 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800314e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3314      	adds	r3, #20
 8003156:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	e853 3f00 	ldrex	r3, [r3]
 800315e:	617b      	str	r3, [r7, #20]
   return(result);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003166:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3314      	adds	r3, #20
 800316e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003170:	627a      	str	r2, [r7, #36]	@ 0x24
 8003172:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003174:	6a39      	ldr	r1, [r7, #32]
 8003176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003178:	e841 2300 	strex	r3, r2, [r1]
 800317c:	61fb      	str	r3, [r7, #28]
   return(result);
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e5      	bne.n	8003150 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	e000      	b.n	800318a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003188:	2302      	movs	r3, #2
  }
}
 800318a:	4618      	mov	r0, r3
 800318c:	3730      	adds	r7, #48	@ 0x30
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	0800325b 	.word	0x0800325b
 8003198:	080032f5 	.word	0x080032f5
 800319c:	08003479 	.word	0x08003479

080031a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d112      	bne.n	80031e0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_UART_Receive_DMA+0x26>
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00b      	b.n	80031e2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f998 	bl	800350c <UART_Start_Receive_DMA>
 80031dc:	4603      	mov	r3, r0
 80031de:	e000      	b.n	80031e2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr

0800320e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr

08003220 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b090      	sub	sp, #64	@ 0x40
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d137      	bne.n	80032e6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003278:	2200      	movs	r2, #0
 800327a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800327c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3314      	adds	r3, #20
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	e853 3f00 	ldrex	r3, [r3]
 800328a:	623b      	str	r3, [r7, #32]
   return(result);
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003292:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800329c:	633a      	str	r2, [r7, #48]	@ 0x30
 800329e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a4:	e841 2300 	strex	r3, r2, [r1]
 80032a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1e5      	bne.n	800327c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	330c      	adds	r3, #12
 80032b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	e853 3f00 	ldrex	r3, [r3]
 80032be:	60fb      	str	r3, [r7, #12]
   return(result);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80032c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	330c      	adds	r3, #12
 80032ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032d0:	61fa      	str	r2, [r7, #28]
 80032d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d4:	69b9      	ldr	r1, [r7, #24]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	e841 2300 	strex	r3, r2, [r1]
 80032dc:	617b      	str	r3, [r7, #20]
   return(result);
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1e5      	bne.n	80032b0 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032e4:	e002      	b.n	80032ec <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80032e6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80032e8:	f7ff ff7f 	bl	80031ea <HAL_UART_TxCpltCallback>
}
 80032ec:	bf00      	nop
 80032ee:	3740      	adds	r7, #64	@ 0x40
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7ff ff7a 	bl	80031fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b09c      	sub	sp, #112	@ 0x70
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d172      	bne.n	8003412 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800332c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800332e:	2200      	movs	r2, #0
 8003330:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003348:	66bb      	str	r3, [r7, #104]	@ 0x68
 800334a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003352:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003354:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003356:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003358:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e5      	bne.n	8003332 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003366:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3314      	adds	r3, #20
 800336c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	667b      	str	r3, [r7, #100]	@ 0x64
 800337e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3314      	adds	r3, #20
 8003384:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003386:	647a      	str	r2, [r7, #68]	@ 0x44
 8003388:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800338c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1e5      	bne.n	8003366 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800339a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	623b      	str	r3, [r7, #32]
   return(result);
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80033b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3314      	adds	r3, #20
 80033b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80033ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80033bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e5      	bne.n	800339a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d119      	bne.n	8003412 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f023 0310 	bic.w	r3, r3, #16
 80033f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80033fe:	61fa      	str	r2, [r7, #28]
 8003400:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	69b9      	ldr	r1, [r7, #24]
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	617b      	str	r3, [r7, #20]
   return(result);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e5      	bne.n	80033de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003414:	2200      	movs	r2, #0
 8003416:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003418:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800341a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341c:	2b01      	cmp	r3, #1
 800341e:	d106      	bne.n	800342e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003422:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003424:	4619      	mov	r1, r3
 8003426:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003428:	f7ff ff0c 	bl	8003244 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800342c:	e002      	b.n	8003434 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800342e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003430:	f7ff feed 	bl	800320e <HAL_UART_RxCpltCallback>
}
 8003434:	bf00      	nop
 8003436:	3770      	adds	r7, #112	@ 0x70
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003454:	2b01      	cmp	r3, #1
 8003456:	d108      	bne.n	800346a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	b29b      	uxth	r3, r3
 8003460:	4619      	mov	r1, r3
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff feee 	bl	8003244 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003468:	e002      	b.n	8003470 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff fed8 	bl	8003220 <HAL_UART_RxHalfCpltCallback>
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf14      	ite	ne
 8003498:	2301      	movne	r3, #1
 800349a:	2300      	moveq	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b21      	cmp	r3, #33	@ 0x21
 80034aa:	d108      	bne.n	80034be <UART_DMAError+0x46>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2200      	movs	r2, #0
 80034b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80034b8:	68b8      	ldr	r0, [r7, #8]
 80034ba:	f000 f8c1 	bl	8003640 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b22      	cmp	r3, #34	@ 0x22
 80034de:	d108      	bne.n	80034f2 <UART_DMAError+0x7a>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2200      	movs	r2, #0
 80034ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80034ec:	68b8      	ldr	r0, [r7, #8]
 80034ee:	f000 f8ce 	bl	800368e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	f043 0210 	orr.w	r2, r3, #16
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034fe:	68b8      	ldr	r0, [r7, #8]
 8003500:	f7ff fe97 	bl	8003232 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b098      	sub	sp, #96	@ 0x60
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2222      	movs	r2, #34	@ 0x22
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003538:	4a3e      	ldr	r2, [pc, #248]	@ (8003634 <UART_Start_Receive_DMA+0x128>)
 800353a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003540:	4a3d      	ldr	r2, [pc, #244]	@ (8003638 <UART_Start_Receive_DMA+0x12c>)
 8003542:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003548:	4a3c      	ldr	r2, [pc, #240]	@ (800363c <UART_Start_Receive_DMA+0x130>)
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	2200      	movs	r2, #0
 8003552:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003554:	f107 0308 	add.w	r3, r7, #8
 8003558:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3304      	adds	r3, #4
 8003564:	4619      	mov	r1, r3
 8003566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	88fb      	ldrh	r3, [r7, #6]
 800356c:	f7fd ff6c 	bl	8001448 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d019      	beq.n	80035c2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800359e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80035b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80035b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035b6:	e841 2300 	strex	r3, r2, [r1]
 80035ba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80035bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1e5      	bne.n	800358e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3314      	adds	r3, #20
 80035c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035cc:	e853 3f00 	ldrex	r3, [r3]
 80035d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035e2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80035e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80035e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1e5      	bne.n	80035c2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3314      	adds	r3, #20
 80035fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	617b      	str	r3, [r7, #20]
   return(result);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800360c:	653b      	str	r3, [r7, #80]	@ 0x50
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3314      	adds	r3, #20
 8003614:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003616:	627a      	str	r2, [r7, #36]	@ 0x24
 8003618:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	6a39      	ldr	r1, [r7, #32]
 800361c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	61fb      	str	r3, [r7, #28]
   return(result);
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e5      	bne.n	80035f6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3760      	adds	r7, #96	@ 0x60
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	08003311 	.word	0x08003311
 8003638:	0800343d 	.word	0x0800343d
 800363c:	08003479 	.word	0x08003479

08003640 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003640:	b480      	push	{r7}
 8003642:	b089      	sub	sp, #36	@ 0x24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	330c      	adds	r3, #12
 800364e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	e853 3f00 	ldrex	r3, [r3]
 8003656:	60bb      	str	r3, [r7, #8]
   return(result);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	330c      	adds	r3, #12
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	61ba      	str	r2, [r7, #24]
 800366a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	6979      	ldr	r1, [r7, #20]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	613b      	str	r3, [r7, #16]
   return(result);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e5      	bne.n	8003648 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003684:	bf00      	nop
 8003686:	3724      	adds	r7, #36	@ 0x24
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr

0800368e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800368e:	b480      	push	{r7}
 8003690:	b095      	sub	sp, #84	@ 0x54
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	330c      	adds	r3, #12
 800369c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80036b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e5      	bne.n	8003696 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3314      	adds	r3, #20
 80036d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e5      	bne.n	80036ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003702:	2b01      	cmp	r3, #1
 8003704:	d119      	bne.n	800373a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	60bb      	str	r3, [r7, #8]
   return(result);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f023 0310 	bic.w	r3, r3, #16
 800371c:	647b      	str	r3, [r7, #68]	@ 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	330c      	adds	r3, #12
 8003724:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003726:	61ba      	str	r2, [r7, #24]
 8003728:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	6979      	ldr	r1, [r7, #20]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	613b      	str	r3, [r7, #16]
   return(result);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e5      	bne.n	8003706 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003748:	bf00      	nop
 800374a:	3754      	adds	r7, #84	@ 0x54
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
	...

08003754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800378e:	f023 030c 	bic.w	r3, r3, #12
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	430b      	orrs	r3, r1
 800379a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003868 <UART_SetConfig+0x114>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d103      	bne.n	80037c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037bc:	f7fe fdb2 	bl	8002324 <HAL_RCC_GetPCLK2Freq>
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	e002      	b.n	80037ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037c4:	f7fe fd9a 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 80037c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009a      	lsls	r2, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	4a22      	ldr	r2, [pc, #136]	@ (800386c <UART_SetConfig+0x118>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	0119      	lsls	r1, r3, #4
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009a      	lsls	r2, r3, #2
 80037f4:	441a      	add	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003800:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <UART_SetConfig+0x118>)
 8003802:	fba3 0302 	umull	r0, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	2064      	movs	r0, #100	@ 0x64
 800380a:	fb00 f303 	mul.w	r3, r0, r3
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	3332      	adds	r3, #50	@ 0x32
 8003814:	4a15      	ldr	r2, [pc, #84]	@ (800386c <UART_SetConfig+0x118>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003820:	4419      	add	r1, r3
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	009a      	lsls	r2, r3, #2
 800382c:	441a      	add	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	fbb2 f2f3 	udiv	r2, r2, r3
 8003838:	4b0c      	ldr	r3, [pc, #48]	@ (800386c <UART_SetConfig+0x118>)
 800383a:	fba3 0302 	umull	r0, r3, r3, r2
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2064      	movs	r0, #100	@ 0x64
 8003842:	fb00 f303 	mul.w	r3, r0, r3
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	3332      	adds	r3, #50	@ 0x32
 800384c:	4a07      	ldr	r2, [pc, #28]	@ (800386c <UART_SetConfig+0x118>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	f003 020f 	and.w	r2, r3, #15
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	440a      	add	r2, r1
 800385e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40013800 	.word	0x40013800
 800386c:	51eb851f 	.word	0x51eb851f

08003870 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003876:	f3ef 8305 	mrs	r3, IPSR
 800387a:	60bb      	str	r3, [r7, #8]
  return(result);
 800387c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10f      	bne.n	80038a2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003882:	f3ef 8310 	mrs	r3, PRIMASK
 8003886:	607b      	str	r3, [r7, #4]
  return(result);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <osKernelInitialize+0x32>
 800388e:	4b10      	ldr	r3, [pc, #64]	@ (80038d0 <osKernelInitialize+0x60>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d109      	bne.n	80038aa <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003896:	f3ef 8311 	mrs	r3, BASEPRI
 800389a:	603b      	str	r3, [r7, #0]
  return(result);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80038a2:	f06f 0305 	mvn.w	r3, #5
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e00c      	b.n	80038c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038aa:	4b09      	ldr	r3, [pc, #36]	@ (80038d0 <osKernelInitialize+0x60>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d105      	bne.n	80038be <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <osKernelInitialize+0x60>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e002      	b.n	80038c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80038c4:	68fb      	ldr	r3, [r7, #12]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	20000238 	.word	0x20000238

080038d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038da:	f3ef 8305 	mrs	r3, IPSR
 80038de:	60bb      	str	r3, [r7, #8]
  return(result);
 80038e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e6:	f3ef 8310 	mrs	r3, PRIMASK
 80038ea:	607b      	str	r3, [r7, #4]
  return(result);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <osKernelStart+0x32>
 80038f2:	4b11      	ldr	r3, [pc, #68]	@ (8003938 <osKernelStart+0x64>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d109      	bne.n	800390e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038fa:	f3ef 8311 	mrs	r3, BASEPRI
 80038fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003906:	f06f 0305 	mvn.w	r3, #5
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e00e      	b.n	800392c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800390e:	4b0a      	ldr	r3, [pc, #40]	@ (8003938 <osKernelStart+0x64>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d107      	bne.n	8003926 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003916:	4b08      	ldr	r3, [pc, #32]	@ (8003938 <osKernelStart+0x64>)
 8003918:	2202      	movs	r2, #2
 800391a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800391c:	f001 fa46 	bl	8004dac <vTaskStartScheduler>
      stat = osOK;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e002      	b.n	800392c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295
 800392a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800392c:	68fb      	ldr	r3, [r7, #12]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000238 	.word	0x20000238

0800393c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b092      	sub	sp, #72	@ 0x48
 8003940:	af04      	add	r7, sp, #16
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800394c:	f3ef 8305 	mrs	r3, IPSR
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003954:	2b00      	cmp	r3, #0
 8003956:	f040 8094 	bne.w	8003a82 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395a:	f3ef 8310 	mrs	r3, PRIMASK
 800395e:	623b      	str	r3, [r7, #32]
  return(result);
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 808d 	bne.w	8003a82 <osThreadNew+0x146>
 8003968:	4b48      	ldr	r3, [pc, #288]	@ (8003a8c <osThreadNew+0x150>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b02      	cmp	r3, #2
 800396e:	d106      	bne.n	800397e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003970:	f3ef 8311 	mrs	r3, BASEPRI
 8003974:	61fb      	str	r3, [r7, #28]
  return(result);
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f040 8082 	bne.w	8003a82 <osThreadNew+0x146>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d07e      	beq.n	8003a82 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003984:	2380      	movs	r3, #128	@ 0x80
 8003986:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003988:	2318      	movs	r3, #24
 800398a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800398c:	2300      	movs	r3, #0
 800398e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003990:	f107 031b 	add.w	r3, r7, #27
 8003994:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003996:	f04f 33ff 	mov.w	r3, #4294967295
 800399a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d045      	beq.n	8003a2e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <osThreadNew+0x74>
        name = attr->name;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <osThreadNew+0x9a>
 80039c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c6:	2b38      	cmp	r3, #56	@ 0x38
 80039c8:	d805      	bhi.n	80039d6 <osThreadNew+0x9a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <osThreadNew+0x9e>
        return (NULL);
 80039d6:	2300      	movs	r3, #0
 80039d8:	e054      	b.n	8003a84 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00e      	beq.n	8003a10 <osThreadNew+0xd4>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b5b      	cmp	r3, #91	@ 0x5b
 80039f8:	d90a      	bls.n	8003a10 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d006      	beq.n	8003a10 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <osThreadNew+0xd4>
        mem = 1;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a0e:	e010      	b.n	8003a32 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10c      	bne.n	8003a32 <osThreadNew+0xf6>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d108      	bne.n	8003a32 <osThreadNew+0xf6>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d104      	bne.n	8003a32 <osThreadNew+0xf6>
          mem = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a2c:	e001      	b.n	8003a32 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8003a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d110      	bne.n	8003a5a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a40:	9202      	str	r2, [sp, #8]
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a4c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 ffda 	bl	8004a08 <xTaskCreateStatic>
 8003a54:	4603      	mov	r3, r0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e013      	b.n	8003a82 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d110      	bne.n	8003a82 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f001 f827 	bl	8004ac6 <xTaskCreate>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d001      	beq.n	8003a82 <osThreadNew+0x146>
          hTask = NULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a82:	697b      	ldr	r3, [r7, #20]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3738      	adds	r7, #56	@ 0x38
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000238 	.word	0x20000238

08003a90 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a98:	f3ef 8305 	mrs	r3, IPSR
 8003a9c:	613b      	str	r3, [r7, #16]
  return(result);
 8003a9e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10f      	bne.n	8003ac4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <osDelay+0x34>
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae8 <osDelay+0x58>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d109      	bne.n	8003acc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ab8:	f3ef 8311 	mrs	r3, BASEPRI
 8003abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <osDelay+0x3c>
    stat = osErrorISR;
 8003ac4:	f06f 0305 	mvn.w	r3, #5
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e007      	b.n	8003adc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <osDelay+0x4c>
      vTaskDelay(ticks);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f001 f932 	bl	8004d40 <vTaskDelay>
    }
  }

  return (stat);
 8003adc:	697b      	ldr	r3, [r7, #20]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000238 	.word	0x20000238

08003aec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a06      	ldr	r2, [pc, #24]	@ (8003b14 <vApplicationGetIdleTaskMemory+0x28>)
 8003afc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4a05      	ldr	r2, [pc, #20]	@ (8003b18 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2280      	movs	r2, #128	@ 0x80
 8003b08:	601a      	str	r2, [r3, #0]
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	2000023c 	.word	0x2000023c
 8003b18:	20000298 	.word	0x20000298

08003b1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a07      	ldr	r2, [pc, #28]	@ (8003b48 <vApplicationGetTimerTaskMemory+0x2c>)
 8003b2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4a06      	ldr	r2, [pc, #24]	@ (8003b4c <vApplicationGetTimerTaskMemory+0x30>)
 8003b32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b3a:	601a      	str	r2, [r3, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	20000498 	.word	0x20000498
 8003b4c:	200004f4 	.word	0x200004f4

08003b50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f103 0208 	add.w	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f04f 32ff 	mov.w	r2, #4294967295
 8003b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f103 0208 	add.w	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f103 0208 	add.w	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr

08003b8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr

08003ba6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c02:	d103      	bne.n	8003c0c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	e00c      	b.n	8003c26 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	e002      	b.n	8003c1a <vListInsert+0x2e>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d2f6      	bcs.n	8003c14 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	601a      	str	r2, [r3, #0]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr

08003c5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6892      	ldr	r2, [r2, #8]
 8003c72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6852      	ldr	r2, [r2, #4]
 8003c7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d103      	bne.n	8003c90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	1e5a      	subs	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
	...

08003cb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003cdc:	f002 fab6 	bl	800624c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce8:	68f9      	ldr	r1, [r7, #12]
 8003cea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003cec:	fb01 f303 	mul.w	r3, r1, r3
 8003cf0:	441a      	add	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	441a      	add	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	22ff      	movs	r2, #255	@ 0xff
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	22ff      	movs	r2, #255	@ 0xff
 8003d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d114      	bne.n	8003d5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d01a      	beq.n	8003d70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f001 fac6 	bl	80052d0 <xTaskRemoveFromEventList>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d012      	beq.n	8003d70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d80 <xQueueGenericReset+0xd0>)
 8003d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	e009      	b.n	8003d70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3310      	adds	r3, #16
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fef5 	bl	8003b50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3324      	adds	r3, #36	@ 0x24
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fef0 	bl	8003b50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d70:	f002 fa9c 	bl	80062ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d74:	2301      	movs	r3, #1
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08e      	sub	sp, #56	@ 0x38
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10b      	bne.n	8003db0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
 8003dae:	e7fd      	b.n	8003dac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10b      	bne.n	8003dce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	e7fd      	b.n	8003dca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <xQueueGenericCreateStatic+0x56>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <xQueueGenericCreateStatic+0x5a>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <xQueueGenericCreateStatic+0x5c>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	623b      	str	r3, [r7, #32]
}
 8003df6:	bf00      	nop
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <xQueueGenericCreateStatic+0x84>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <xQueueGenericCreateStatic+0x88>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <xQueueGenericCreateStatic+0x8a>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	61fb      	str	r3, [r7, #28]
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	e7fd      	b.n	8003e26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e2a:	2350      	movs	r3, #80	@ 0x50
 8003e2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b50      	cmp	r3, #80	@ 0x50
 8003e32:	d00b      	beq.n	8003e4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	61bb      	str	r3, [r7, #24]
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e5e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	68b9      	ldr	r1, [r7, #8]
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f844 	bl	8003efa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3730      	adds	r7, #48	@ 0x30
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08a      	sub	sp, #40	@ 0x28
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	613b      	str	r3, [r7, #16]
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
 8003eb2:	e004      	b.n	8003ebe <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3350      	adds	r3, #80	@ 0x50
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f002 fac4 	bl	8006450 <pvPortMalloc>
 8003ec8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00f      	beq.n	8003ef0 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	3350      	adds	r3, #80	@ 0x50
 8003ed4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ede:	79fa      	ldrb	r2, [r7, #7]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f805 	bl	8003efa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
	}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e002      	b.n	8003f1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f28:	2101      	movs	r1, #1
 8003f2a:	69b8      	ldr	r0, [r7, #24]
 8003f2c:	f7ff fec0 	bl	8003cb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00e      	beq.n	8003f6c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003f60:	2300      	movs	r3, #0
 8003f62:	2200      	movs	r2, #0
 8003f64:	2100      	movs	r1, #0
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f81c 	bl	8003fa4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6939      	ldr	r1, [r7, #16]
 8003f8c:	6978      	ldr	r0, [r7, #20]
 8003f8e:	f7ff ff75 	bl	8003e7c <xQueueGenericCreate>
 8003f92:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f7ff ffd3 	bl	8003f40 <prvInitialiseMutex>

		return pxNewQueue;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
	}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08e      	sub	sp, #56	@ 0x38
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <xQueueGenericSend+0x34>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	e7fd      	b.n	8003fd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d103      	bne.n	8003fe6 <xQueueGenericSend+0x42>
 8003fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <xQueueGenericSend+0x46>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <xQueueGenericSend+0x48>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <xQueueGenericSend+0x64>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004002:	bf00      	nop
 8004004:	bf00      	nop
 8004006:	e7fd      	b.n	8004004 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d103      	bne.n	8004016 <xQueueGenericSend+0x72>
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <xQueueGenericSend+0x76>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <xQueueGenericSend+0x78>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10b      	bne.n	8004038 <xQueueGenericSend+0x94>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	623b      	str	r3, [r7, #32]
}
 8004032:	bf00      	nop
 8004034:	bf00      	nop
 8004036:	e7fd      	b.n	8004034 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004038:	f001 fb0e 	bl	8005658 <xTaskGetSchedulerState>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d102      	bne.n	8004048 <xQueueGenericSend+0xa4>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <xQueueGenericSend+0xa8>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <xQueueGenericSend+0xaa>
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10b      	bne.n	800406a <xQueueGenericSend+0xc6>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	61fb      	str	r3, [r7, #28]
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	e7fd      	b.n	8004066 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800406a:	f002 f8ef 	bl	800624c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	429a      	cmp	r2, r3
 8004078:	d302      	bcc.n	8004080 <xQueueGenericSend+0xdc>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d129      	bne.n	80040d4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004086:	f000 fb53 	bl	8004730 <prvCopyDataToQueue>
 800408a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800408c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	d010      	beq.n	80040b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	3324      	adds	r3, #36	@ 0x24
 8004098:	4618      	mov	r0, r3
 800409a:	f001 f919 	bl	80052d0 <xTaskRemoveFromEventList>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040a4:	4b3f      	ldr	r3, [pc, #252]	@ (80041a4 <xQueueGenericSend+0x200>)
 80040a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	f3bf 8f6f 	isb	sy
 80040b4:	e00a      	b.n	80040cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040bc:	4b39      	ldr	r3, [pc, #228]	@ (80041a4 <xQueueGenericSend+0x200>)
 80040be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040cc:	f002 f8ee 	bl	80062ac <vPortExitCritical>
				return pdPASS;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e063      	b.n	800419c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040da:	f002 f8e7 	bl	80062ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	e05c      	b.n	800419c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d106      	bne.n	80040f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040e8:	f107 0314 	add.w	r3, r7, #20
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 f953 	bl	8005398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040f2:	2301      	movs	r3, #1
 80040f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040f6:	f002 f8d9 	bl	80062ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040fa:	f000 febf 	bl	8004e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040fe:	f002 f8a5 	bl	800624c <vPortEnterCritical>
 8004102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004104:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004108:	b25b      	sxtb	r3, r3
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d103      	bne.n	8004118 <xQueueGenericSend+0x174>
 8004110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800411e:	b25b      	sxtb	r3, r3
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d103      	bne.n	800412e <xQueueGenericSend+0x18a>
 8004126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800412e:	f002 f8bd 	bl	80062ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004132:	1d3a      	adds	r2, r7, #4
 8004134:	f107 0314 	add.w	r3, r7, #20
 8004138:	4611      	mov	r1, r2
 800413a:	4618      	mov	r0, r3
 800413c:	f001 f942 	bl	80053c4 <xTaskCheckForTimeOut>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d124      	bne.n	8004190 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004146:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004148:	f000 fbea 	bl	8004920 <prvIsQueueFull>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d018      	beq.n	8004184 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	3310      	adds	r3, #16
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f001 f866 	bl	800522c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004162:	f000 fb75 	bl	8004850 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004166:	f000 fe97 	bl	8004e98 <xTaskResumeAll>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	f47f af7c 	bne.w	800406a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004172:	4b0c      	ldr	r3, [pc, #48]	@ (80041a4 <xQueueGenericSend+0x200>)
 8004174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	f3bf 8f6f 	isb	sy
 8004182:	e772      	b.n	800406a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004186:	f000 fb63 	bl	8004850 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800418a:	f000 fe85 	bl	8004e98 <xTaskResumeAll>
 800418e:	e76c      	b.n	800406a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004190:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004192:	f000 fb5d 	bl	8004850 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004196:	f000 fe7f 	bl	8004e98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800419a:	2300      	movs	r3, #0
		}
	}
}
 800419c:	4618      	mov	r0, r3
 800419e:	3738      	adds	r7, #56	@ 0x38
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	e000ed04 	.word	0xe000ed04

080041a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08e      	sub	sp, #56	@ 0x38
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d103      	bne.n	80041e6 <xQueueGenericSendFromISR+0x3e>
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <xQueueGenericSendFromISR+0x42>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <xQueueGenericSendFromISR+0x44>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	623b      	str	r3, [r7, #32]
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d103      	bne.n	8004216 <xQueueGenericSendFromISR+0x6e>
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <xQueueGenericSendFromISR+0x72>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <xQueueGenericSendFromISR+0x74>
 800421a:	2300      	movs	r3, #0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	61fb      	str	r3, [r7, #28]
}
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	e7fd      	b.n	8004234 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004238:	f002 f8ca 	bl	80063d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800423c:	f3ef 8211 	mrs	r2, BASEPRI
 8004240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	61ba      	str	r2, [r7, #24]
 8004252:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004254:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004256:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <xQueueGenericSendFromISR+0xc2>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d12c      	bne.n	80042c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004270:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	68b9      	ldr	r1, [r7, #8]
 8004278:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800427a:	f000 fa59 	bl	8004730 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800427e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d112      	bne.n	80042ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d016      	beq.n	80042be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004292:	3324      	adds	r3, #36	@ 0x24
 8004294:	4618      	mov	r0, r3
 8004296:	f001 f81b 	bl	80052d0 <xTaskRemoveFromEventList>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00e      	beq.n	80042be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e007      	b.n	80042be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042b2:	3301      	adds	r3, #1
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	b25a      	sxtb	r2, r3
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80042be:	2301      	movs	r3, #1
 80042c0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80042c2:	e001      	b.n	80042c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3738      	adds	r7, #56	@ 0x38
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08c      	sub	sp, #48	@ 0x30
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <xQueueReceive+0x32>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	623b      	str	r3, [r7, #32]
}
 800430c:	bf00      	nop
 800430e:	bf00      	nop
 8004310:	e7fd      	b.n	800430e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d103      	bne.n	8004320 <xQueueReceive+0x40>
 8004318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <xQueueReceive+0x44>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <xQueueReceive+0x46>
 8004324:	2300      	movs	r3, #0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10b      	bne.n	8004342 <xQueueReceive+0x62>
	__asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	61fb      	str	r3, [r7, #28]
}
 800433c:	bf00      	nop
 800433e:	bf00      	nop
 8004340:	e7fd      	b.n	800433e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004342:	f001 f989 	bl	8005658 <xTaskGetSchedulerState>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d102      	bne.n	8004352 <xQueueReceive+0x72>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <xQueueReceive+0x76>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <xQueueReceive+0x78>
 8004356:	2300      	movs	r3, #0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10b      	bne.n	8004374 <xQueueReceive+0x94>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	61bb      	str	r3, [r7, #24]
}
 800436e:	bf00      	nop
 8004370:	bf00      	nop
 8004372:	e7fd      	b.n	8004370 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004374:	f001 ff6a 	bl	800624c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01f      	beq.n	80043c4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004388:	f000 fa3c 	bl	8004804 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800438c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438e:	1e5a      	subs	r2, r3, #1
 8004390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004392:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00f      	beq.n	80043bc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800439c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439e:	3310      	adds	r3, #16
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 ff95 	bl	80052d0 <xTaskRemoveFromEventList>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043ac:	4b3c      	ldr	r3, [pc, #240]	@ (80044a0 <xQueueReceive+0x1c0>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043bc:	f001 ff76 	bl	80062ac <vPortExitCritical>
				return pdPASS;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e069      	b.n	8004498 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d103      	bne.n	80043d2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043ca:	f001 ff6f 	bl	80062ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e062      	b.n	8004498 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043d8:	f107 0310 	add.w	r3, r7, #16
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 ffdb 	bl	8005398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043e6:	f001 ff61 	bl	80062ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043ea:	f000 fd47 	bl	8004e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ee:	f001 ff2d 	bl	800624c <vPortEnterCritical>
 80043f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043f8:	b25b      	sxtb	r3, r3
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d103      	bne.n	8004408 <xQueueReceive+0x128>
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800440e:	b25b      	sxtb	r3, r3
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d103      	bne.n	800441e <xQueueReceive+0x13e>
 8004416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800441e:	f001 ff45 	bl	80062ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004422:	1d3a      	adds	r2, r7, #4
 8004424:	f107 0310 	add.w	r3, r7, #16
 8004428:	4611      	mov	r1, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f000 ffca 	bl	80053c4 <xTaskCheckForTimeOut>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d123      	bne.n	800447e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004436:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004438:	f000 fa5c 	bl	80048f4 <prvIsQueueEmpty>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d017      	beq.n	8004472 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004444:	3324      	adds	r3, #36	@ 0x24
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 feee 	bl	800522c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004450:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004452:	f000 f9fd 	bl	8004850 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004456:	f000 fd1f 	bl	8004e98 <xTaskResumeAll>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d189      	bne.n	8004374 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004460:	4b0f      	ldr	r3, [pc, #60]	@ (80044a0 <xQueueReceive+0x1c0>)
 8004462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	e780      	b.n	8004374 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004474:	f000 f9ec 	bl	8004850 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004478:	f000 fd0e 	bl	8004e98 <xTaskResumeAll>
 800447c:	e77a      	b.n	8004374 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800447e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004480:	f000 f9e6 	bl	8004850 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004484:	f000 fd08 	bl	8004e98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004488:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800448a:	f000 fa33 	bl	80048f4 <prvIsQueueEmpty>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	f43f af6f 	beq.w	8004374 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004496:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004498:	4618      	mov	r0, r3
 800449a:	3730      	adds	r7, #48	@ 0x30
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	e000ed04 	.word	0xe000ed04

080044a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08e      	sub	sp, #56	@ 0x38
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10b      	bne.n	80044d8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	623b      	str	r3, [r7, #32]
}
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00b      	beq.n	80044f8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	61fb      	str	r3, [r7, #28]
}
 80044f2:	bf00      	nop
 80044f4:	bf00      	nop
 80044f6:	e7fd      	b.n	80044f4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044f8:	f001 f8ae 	bl	8005658 <xTaskGetSchedulerState>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d102      	bne.n	8004508 <xQueueSemaphoreTake+0x64>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <xQueueSemaphoreTake+0x68>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <xQueueSemaphoreTake+0x6a>
 800450c:	2300      	movs	r3, #0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10b      	bne.n	800452a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	61bb      	str	r3, [r7, #24]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800452a:	f001 fe8f 	bl	800624c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800452e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004532:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004536:	2b00      	cmp	r3, #0
 8004538:	d024      	beq.n	8004584 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453c:	1e5a      	subs	r2, r3, #1
 800453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004540:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d104      	bne.n	8004554 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800454a:	f001 fa09 	bl	8005960 <pvTaskIncrementMutexHeldCount>
 800454e:	4602      	mov	r2, r0
 8004550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004552:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00f      	beq.n	800457c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800455c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455e:	3310      	adds	r3, #16
 8004560:	4618      	mov	r0, r3
 8004562:	f000 feb5 	bl	80052d0 <xTaskRemoveFromEventList>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d007      	beq.n	800457c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800456c:	4b54      	ldr	r3, [pc, #336]	@ (80046c0 <xQueueSemaphoreTake+0x21c>)
 800456e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800457c:	f001 fe96 	bl	80062ac <vPortExitCritical>
				return pdPASS;
 8004580:	2301      	movs	r3, #1
 8004582:	e098      	b.n	80046b6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d112      	bne.n	80045b0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	617b      	str	r3, [r7, #20]
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80045a8:	f001 fe80 	bl	80062ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e082      	b.n	80046b6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045b6:	f107 030c 	add.w	r3, r7, #12
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 feec 	bl	8005398 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045c4:	f001 fe72 	bl	80062ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045c8:	f000 fc58 	bl	8004e7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045cc:	f001 fe3e 	bl	800624c <vPortEnterCritical>
 80045d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045d6:	b25b      	sxtb	r3, r3
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d103      	bne.n	80045e6 <xQueueSemaphoreTake+0x142>
 80045de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045ec:	b25b      	sxtb	r3, r3
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d103      	bne.n	80045fc <xQueueSemaphoreTake+0x158>
 80045f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045fc:	f001 fe56 	bl	80062ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004600:	463a      	mov	r2, r7
 8004602:	f107 030c 	add.w	r3, r7, #12
 8004606:	4611      	mov	r1, r2
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fedb 	bl	80053c4 <xTaskCheckForTimeOut>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d132      	bne.n	800467a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004614:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004616:	f000 f96d 	bl	80048f4 <prvIsQueueEmpty>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d026      	beq.n	800466e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d109      	bne.n	800463c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004628:	f001 fe10 	bl	800624c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800462c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	4618      	mov	r0, r3
 8004632:	f001 f82f 	bl	8005694 <xTaskPriorityInherit>
 8004636:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004638:	f001 fe38 	bl	80062ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800463c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463e:	3324      	adds	r3, #36	@ 0x24
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f000 fdf1 	bl	800522c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800464a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800464c:	f000 f900 	bl	8004850 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004650:	f000 fc22 	bl	8004e98 <xTaskResumeAll>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	f47f af67 	bne.w	800452a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800465c:	4b18      	ldr	r3, [pc, #96]	@ (80046c0 <xQueueSemaphoreTake+0x21c>)
 800465e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	e75d      	b.n	800452a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800466e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004670:	f000 f8ee 	bl	8004850 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004674:	f000 fc10 	bl	8004e98 <xTaskResumeAll>
 8004678:	e757      	b.n	800452a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800467a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800467c:	f000 f8e8 	bl	8004850 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004680:	f000 fc0a 	bl	8004e98 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004684:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004686:	f000 f935 	bl	80048f4 <prvIsQueueEmpty>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	f43f af4c 	beq.w	800452a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00d      	beq.n	80046b4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004698:	f001 fdd8 	bl	800624c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800469c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800469e:	f000 f830 	bl	8004702 <prvGetDisinheritPriorityAfterTimeout>
 80046a2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80046a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046aa:	4618      	mov	r0, r3
 80046ac:	f001 f8d0 	bl	8005850 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80046b0:	f001 fdfc 	bl	80062ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3738      	adds	r7, #56	@ 0x38
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	60bb      	str	r3, [r7, #8]
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	e7fd      	b.n	80046e6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80046ea:	f001 fdaf 	bl	800624c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80046f4:	f001 fdda 	bl	80062ac <vPortExitCritical>

	return uxReturn;
 80046f8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	2b00      	cmp	r3, #0
 8004710:	d006      	beq.n	8004720 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e001      	b.n	8004724 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004724:	68fb      	ldr	r3, [r7, #12]
	}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004744:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10d      	bne.n	800476a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d14d      	bne.n	80047f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4618      	mov	r0, r3
 800475c:	f001 f808 	bl	8005770 <xTaskPriorityDisinherit>
 8004760:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	605a      	str	r2, [r3, #4]
 8004768:	e043      	b.n	80047f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d119      	bne.n	80047a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6898      	ldr	r0, [r3, #8]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	461a      	mov	r2, r3
 800477a:	68b9      	ldr	r1, [r7, #8]
 800477c:	f002 f872 	bl	8006864 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004788:	441a      	add	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d32b      	bcc.n	80047f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	609a      	str	r2, [r3, #8]
 80047a2:	e026      	b.n	80047f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	68d8      	ldr	r0, [r3, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ac:	461a      	mov	r2, r3
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	f002 f858 	bl	8006864 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047bc:	425b      	negs	r3, r3
 80047be:	441a      	add	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d207      	bcs.n	80047e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	425b      	negs	r3, r3
 80047da:	441a      	add	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d105      	bne.n	80047f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80047fa:	697b      	ldr	r3, [r7, #20]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d018      	beq.n	8004848 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	441a      	add	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d303      	bcc.n	8004838 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68d9      	ldr	r1, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	461a      	mov	r2, r3
 8004842:	6838      	ldr	r0, [r7, #0]
 8004844:	f002 f80e 	bl	8006864 <memcpy>
	}
}
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004858:	f001 fcf8 	bl	800624c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004862:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004864:	e011      	b.n	800488a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d012      	beq.n	8004894 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3324      	adds	r3, #36	@ 0x24
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fd2c 	bl	80052d0 <xTaskRemoveFromEventList>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800487e:	f000 fe05 	bl	800548c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	3b01      	subs	r3, #1
 8004886:	b2db      	uxtb	r3, r3
 8004888:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800488a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800488e:	2b00      	cmp	r3, #0
 8004890:	dce9      	bgt.n	8004866 <prvUnlockQueue+0x16>
 8004892:	e000      	b.n	8004896 <prvUnlockQueue+0x46>
					break;
 8004894:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	22ff      	movs	r2, #255	@ 0xff
 800489a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800489e:	f001 fd05 	bl	80062ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80048a2:	f001 fcd3 	bl	800624c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048ae:	e011      	b.n	80048d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d012      	beq.n	80048de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3310      	adds	r3, #16
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fd07 	bl	80052d0 <xTaskRemoveFromEventList>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80048c8:	f000 fde0 	bl	800548c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80048cc:	7bbb      	ldrb	r3, [r7, #14]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80048d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	dce9      	bgt.n	80048b0 <prvUnlockQueue+0x60>
 80048dc:	e000      	b.n	80048e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80048de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	22ff      	movs	r2, #255	@ 0xff
 80048e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80048e8:	f001 fce0 	bl	80062ac <vPortExitCritical>
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048fc:	f001 fca6 	bl	800624c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004908:	2301      	movs	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	e001      	b.n	8004912 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004912:	f001 fccb 	bl	80062ac <vPortExitCritical>

	return xReturn;
 8004916:	68fb      	ldr	r3, [r7, #12]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004928:	f001 fc90 	bl	800624c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004934:	429a      	cmp	r2, r3
 8004936:	d102      	bne.n	800493e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004938:	2301      	movs	r3, #1
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e001      	b.n	8004942 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004942:	f001 fcb3 	bl	80062ac <vPortExitCritical>

	return xReturn;
 8004946:	68fb      	ldr	r3, [r7, #12]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800495a:	2300      	movs	r3, #0
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	e014      	b.n	800498a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004960:	4a0e      	ldr	r2, [pc, #56]	@ (800499c <vQueueAddToRegistry+0x4c>)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10b      	bne.n	8004984 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800496c:	490b      	ldr	r1, [pc, #44]	@ (800499c <vQueueAddToRegistry+0x4c>)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004976:	4a09      	ldr	r2, [pc, #36]	@ (800499c <vQueueAddToRegistry+0x4c>)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4413      	add	r3, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004982:	e006      	b.n	8004992 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b07      	cmp	r3, #7
 800498e:	d9e7      	bls.n	8004960 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004990:	bf00      	nop
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	200008f4 	.word	0x200008f4

080049a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049b0:	f001 fc4c 	bl	800624c <vPortEnterCritical>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049ba:	b25b      	sxtb	r3, r3
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d103      	bne.n	80049ca <vQueueWaitForMessageRestricted+0x2a>
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049d0:	b25b      	sxtb	r3, r3
 80049d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d6:	d103      	bne.n	80049e0 <vQueueWaitForMessageRestricted+0x40>
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049e0:	f001 fc64 	bl	80062ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	3324      	adds	r3, #36	@ 0x24
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	68b9      	ldr	r1, [r7, #8]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fc3f 	bl	8005278 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049fa:	6978      	ldr	r0, [r7, #20]
 80049fc:	f7ff ff28 	bl	8004850 <prvUnlockQueue>
	}
 8004a00:	bf00      	nop
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08e      	sub	sp, #56	@ 0x38
 8004a0c:	af04      	add	r7, sp, #16
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10b      	bne.n	8004a34 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	623b      	str	r3, [r7, #32]
}
 8004a2e:	bf00      	nop
 8004a30:	bf00      	nop
 8004a32:	e7fd      	b.n	8004a30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10b      	bne.n	8004a52 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	61fb      	str	r3, [r7, #28]
}
 8004a4c:	bf00      	nop
 8004a4e:	bf00      	nop
 8004a50:	e7fd      	b.n	8004a4e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a52:	235c      	movs	r3, #92	@ 0x5c
 8004a54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	2b5c      	cmp	r3, #92	@ 0x5c
 8004a5a:	d00b      	beq.n	8004a74 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	61bb      	str	r3, [r7, #24]
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	e7fd      	b.n	8004a70 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01e      	beq.n	8004ab8 <xTaskCreateStatic+0xb0>
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01b      	beq.n	8004ab8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a88:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a92:	2300      	movs	r3, #0
 8004a94:	9303      	str	r3, [sp, #12]
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	9302      	str	r3, [sp, #8]
 8004a9a:	f107 0314 	add.w	r3, r7, #20
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 f850 	bl	8004b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ab0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ab2:	f000 f8d5 	bl	8004c60 <prvAddNewTaskToReadyList>
 8004ab6:	e001      	b.n	8004abc <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004abc:	697b      	ldr	r3, [r7, #20]
	}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3728      	adds	r7, #40	@ 0x28
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b08c      	sub	sp, #48	@ 0x30
 8004aca:	af04      	add	r7, sp, #16
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 fcb8 	bl	8006450 <pvPortMalloc>
 8004ae0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004ae8:	205c      	movs	r0, #92	@ 0x5c
 8004aea:	f001 fcb1 	bl	8006450 <pvPortMalloc>
 8004aee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	631a      	str	r2, [r3, #48]	@ 0x30
 8004afc:	e005      	b.n	8004b0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004afe:	6978      	ldr	r0, [r7, #20]
 8004b00:	f001 fd6e 	bl	80065e0 <vPortFree>
 8004b04:	e001      	b.n	8004b0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d017      	beq.n	8004b40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b18:	88fa      	ldrh	r2, [r7, #6]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	9303      	str	r3, [sp, #12]
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	9302      	str	r3, [sp, #8]
 8004b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b24:	9301      	str	r3, [sp, #4]
 8004b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f80e 	bl	8004b50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b34:	69f8      	ldr	r0, [r7, #28]
 8004b36:	f000 f893 	bl	8004c60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	e002      	b.n	8004b46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b40:	f04f 33ff 	mov.w	r3, #4294967295
 8004b44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b46:	69bb      	ldr	r3, [r7, #24]
	}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	461a      	mov	r2, r3
 8004b68:	21a5      	movs	r1, #165	@ 0xa5
 8004b6a:	f001 fe4f 	bl	800680c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f023 0307 	bic.w	r3, r3, #7
 8004b86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	617b      	str	r3, [r7, #20]
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	e7fd      	b.n	8004ba6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	e012      	b.n	8004bd6 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	7819      	ldrb	r1, [r3, #0]
 8004bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3334      	adds	r3, #52	@ 0x34
 8004bc0:	460a      	mov	r2, r1
 8004bc2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	4413      	add	r3, r2
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d006      	beq.n	8004bde <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	61fb      	str	r3, [r7, #28]
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	2b0f      	cmp	r3, #15
 8004bda:	d9e9      	bls.n	8004bb0 <prvInitialiseNewTask+0x60>
 8004bdc:	e000      	b.n	8004be0 <prvInitialiseNewTask+0x90>
		{
			break;
 8004bde:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bea:	2b37      	cmp	r3, #55	@ 0x37
 8004bec:	d901      	bls.n	8004bf2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bee:	2337      	movs	r3, #55	@ 0x37
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	2200      	movs	r2, #0
 8004c02:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	3304      	adds	r3, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe ffc0 	bl	8003b8e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	3318      	adds	r3, #24
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe ffbb 	bl	8003b8e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	2200      	movs	r2, #0
 8004c32:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	68f9      	ldr	r1, [r7, #12]
 8004c40:	69b8      	ldr	r0, [r7, #24]
 8004c42:	f001 fa15 	bl	8006070 <pxPortInitialiseStack>
 8004c46:	4602      	mov	r2, r0
 8004c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c58:	bf00      	nop
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c68:	f001 faf0 	bl	800624c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d24 <prvAddNewTaskToReadyList+0xc4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3301      	adds	r3, #1
 8004c72:	4a2c      	ldr	r2, [pc, #176]	@ (8004d24 <prvAddNewTaskToReadyList+0xc4>)
 8004c74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c76:	4b2c      	ldr	r3, [pc, #176]	@ (8004d28 <prvAddNewTaskToReadyList+0xc8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8004d28 <prvAddNewTaskToReadyList+0xc8>)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c84:	4b27      	ldr	r3, [pc, #156]	@ (8004d24 <prvAddNewTaskToReadyList+0xc4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d110      	bne.n	8004cae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c8c:	f000 fc22 	bl	80054d4 <prvInitialiseTaskLists>
 8004c90:	e00d      	b.n	8004cae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c92:	4b26      	ldr	r3, [pc, #152]	@ (8004d2c <prvAddNewTaskToReadyList+0xcc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c9a:	4b23      	ldr	r3, [pc, #140]	@ (8004d28 <prvAddNewTaskToReadyList+0xc8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d802      	bhi.n	8004cae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8004d28 <prvAddNewTaskToReadyList+0xc8>)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cae:	4b20      	ldr	r3, [pc, #128]	@ (8004d30 <prvAddNewTaskToReadyList+0xd0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <prvAddNewTaskToReadyList+0xd0>)
 8004cb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d30 <prvAddNewTaskToReadyList+0xd0>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d34 <prvAddNewTaskToReadyList+0xd4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d903      	bls.n	8004cd4 <prvAddNewTaskToReadyList+0x74>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd0:	4a18      	ldr	r2, [pc, #96]	@ (8004d34 <prvAddNewTaskToReadyList+0xd4>)
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4a15      	ldr	r2, [pc, #84]	@ (8004d38 <prvAddNewTaskToReadyList+0xd8>)
 8004ce2:	441a      	add	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4610      	mov	r0, r2
 8004cec:	f7fe ff5b 	bl	8003ba6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cf0:	f001 fadc 	bl	80062ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8004d2c <prvAddNewTaskToReadyList+0xcc>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00e      	beq.n	8004d1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <prvAddNewTaskToReadyList+0xc8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d207      	bcs.n	8004d1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d3c <prvAddNewTaskToReadyList+0xdc>)
 8004d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000e08 	.word	0x20000e08
 8004d28:	20000934 	.word	0x20000934
 8004d2c:	20000e14 	.word	0x20000e14
 8004d30:	20000e24 	.word	0x20000e24
 8004d34:	20000e10 	.word	0x20000e10
 8004d38:	20000938 	.word	0x20000938
 8004d3c:	e000ed04 	.word	0xe000ed04

08004d40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d018      	beq.n	8004d84 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d52:	4b14      	ldr	r3, [pc, #80]	@ (8004da4 <vTaskDelay+0x64>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00b      	beq.n	8004d72 <vTaskDelay+0x32>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	60bb      	str	r3, [r7, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d72:	f000 f883 	bl	8004e7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d76:	2100      	movs	r1, #0
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fe05 	bl	8005988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d7e:	f000 f88b 	bl	8004e98 <xTaskResumeAll>
 8004d82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d107      	bne.n	8004d9a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004d8a:	4b07      	ldr	r3, [pc, #28]	@ (8004da8 <vTaskDelay+0x68>)
 8004d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000e30 	.word	0x20000e30
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	@ 0x28
 8004db0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004dba:	463a      	mov	r2, r7
 8004dbc:	1d39      	adds	r1, r7, #4
 8004dbe:	f107 0308 	add.w	r3, r7, #8
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fe fe92 	bl	8003aec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dc8:	6839      	ldr	r1, [r7, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	9202      	str	r2, [sp, #8]
 8004dd0:	9301      	str	r3, [sp, #4]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	460a      	mov	r2, r1
 8004dda:	4922      	ldr	r1, [pc, #136]	@ (8004e64 <vTaskStartScheduler+0xb8>)
 8004ddc:	4822      	ldr	r0, [pc, #136]	@ (8004e68 <vTaskStartScheduler+0xbc>)
 8004dde:	f7ff fe13 	bl	8004a08 <xTaskCreateStatic>
 8004de2:	4603      	mov	r3, r0
 8004de4:	4a21      	ldr	r2, [pc, #132]	@ (8004e6c <vTaskStartScheduler+0xc0>)
 8004de6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004de8:	4b20      	ldr	r3, [pc, #128]	@ (8004e6c <vTaskStartScheduler+0xc0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004df0:	2301      	movs	r3, #1
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e001      	b.n	8004dfa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d102      	bne.n	8004e06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004e00:	f000 fe16 	bl	8005a30 <xTimerCreateTimerTask>
 8004e04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d116      	bne.n	8004e3a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	613b      	str	r3, [r7, #16]
}
 8004e1e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e20:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <vTaskStartScheduler+0xc4>)
 8004e22:	f04f 32ff 	mov.w	r2, #4294967295
 8004e26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e28:	4b12      	ldr	r3, [pc, #72]	@ (8004e74 <vTaskStartScheduler+0xc8>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004e2e:	4b12      	ldr	r3, [pc, #72]	@ (8004e78 <vTaskStartScheduler+0xcc>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e34:	f001 f998 	bl	8006168 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e38:	e00f      	b.n	8004e5a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d10b      	bne.n	8004e5a <vTaskStartScheduler+0xae>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	60fb      	str	r3, [r7, #12]
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	e7fd      	b.n	8004e56 <vTaskStartScheduler+0xaa>
}
 8004e5a:	bf00      	nop
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	080068ac 	.word	0x080068ac
 8004e68:	080054a5 	.word	0x080054a5
 8004e6c:	20000e2c 	.word	0x20000e2c
 8004e70:	20000e28 	.word	0x20000e28
 8004e74:	20000e14 	.word	0x20000e14
 8004e78:	20000e0c 	.word	0x20000e0c

08004e7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e80:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <vTaskSuspendAll+0x18>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3301      	adds	r3, #1
 8004e86:	4a03      	ldr	r2, [pc, #12]	@ (8004e94 <vTaskSuspendAll+0x18>)
 8004e88:	6013      	str	r3, [r2, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000e30 	.word	0x20000e30

08004e98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ea6:	4b42      	ldr	r3, [pc, #264]	@ (8004fb0 <xTaskResumeAll+0x118>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10b      	bne.n	8004ec6 <xTaskResumeAll+0x2e>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	603b      	str	r3, [r7, #0]
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	e7fd      	b.n	8004ec2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ec6:	f001 f9c1 	bl	800624c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004eca:	4b39      	ldr	r3, [pc, #228]	@ (8004fb0 <xTaskResumeAll+0x118>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	4a37      	ldr	r2, [pc, #220]	@ (8004fb0 <xTaskResumeAll+0x118>)
 8004ed2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed4:	4b36      	ldr	r3, [pc, #216]	@ (8004fb0 <xTaskResumeAll+0x118>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d162      	bne.n	8004fa2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004edc:	4b35      	ldr	r3, [pc, #212]	@ (8004fb4 <xTaskResumeAll+0x11c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d05e      	beq.n	8004fa2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ee4:	e02f      	b.n	8004f46 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004ee6:	4b34      	ldr	r3, [pc, #208]	@ (8004fb8 <xTaskResumeAll+0x120>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3318      	adds	r3, #24
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe feb2 	bl	8003c5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fe fead 	bl	8003c5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f06:	4b2d      	ldr	r3, [pc, #180]	@ (8004fbc <xTaskResumeAll+0x124>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d903      	bls.n	8004f16 <xTaskResumeAll+0x7e>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f12:	4a2a      	ldr	r2, [pc, #168]	@ (8004fbc <xTaskResumeAll+0x124>)
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4a27      	ldr	r2, [pc, #156]	@ (8004fc0 <xTaskResumeAll+0x128>)
 8004f24:	441a      	add	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	4610      	mov	r0, r2
 8004f2e:	f7fe fe3a 	bl	8003ba6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f36:	4b23      	ldr	r3, [pc, #140]	@ (8004fc4 <xTaskResumeAll+0x12c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d302      	bcc.n	8004f46 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004f40:	4b21      	ldr	r3, [pc, #132]	@ (8004fc8 <xTaskResumeAll+0x130>)
 8004f42:	2201      	movs	r2, #1
 8004f44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f46:	4b1c      	ldr	r3, [pc, #112]	@ (8004fb8 <xTaskResumeAll+0x120>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1cb      	bne.n	8004ee6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f54:	f000 fb5c 	bl	8005610 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004f58:	4b1c      	ldr	r3, [pc, #112]	@ (8004fcc <xTaskResumeAll+0x134>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d010      	beq.n	8004f86 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f64:	f000 f844 	bl	8004ff0 <xTaskIncrementTick>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004f6e:	4b16      	ldr	r3, [pc, #88]	@ (8004fc8 <xTaskResumeAll+0x130>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1f1      	bne.n	8004f64 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004f80:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <xTaskResumeAll+0x134>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f86:	4b10      	ldr	r3, [pc, #64]	@ (8004fc8 <xTaskResumeAll+0x130>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d009      	beq.n	8004fa2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f92:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd0 <xTaskResumeAll+0x138>)
 8004f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fa2:	f001 f983 	bl	80062ac <vPortExitCritical>

	return xAlreadyYielded;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20000e30 	.word	0x20000e30
 8004fb4:	20000e08 	.word	0x20000e08
 8004fb8:	20000dc8 	.word	0x20000dc8
 8004fbc:	20000e10 	.word	0x20000e10
 8004fc0:	20000938 	.word	0x20000938
 8004fc4:	20000934 	.word	0x20000934
 8004fc8:	20000e1c 	.word	0x20000e1c
 8004fcc:	20000e18 	.word	0x20000e18
 8004fd0:	e000ed04 	.word	0xe000ed04

08004fd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fda:	4b04      	ldr	r3, [pc, #16]	@ (8004fec <xTaskGetTickCount+0x18>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fe0:	687b      	ldr	r3, [r7, #4]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr
 8004fec:	20000e0c 	.word	0x20000e0c

08004ff0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ffa:	4b52      	ldr	r3, [pc, #328]	@ (8005144 <xTaskIncrementTick+0x154>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f040 808f 	bne.w	8005122 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005004:	4b50      	ldr	r3, [pc, #320]	@ (8005148 <xTaskIncrementTick+0x158>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800500c:	4a4e      	ldr	r2, [pc, #312]	@ (8005148 <xTaskIncrementTick+0x158>)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d121      	bne.n	800505c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005018:	4b4c      	ldr	r3, [pc, #304]	@ (800514c <xTaskIncrementTick+0x15c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00b      	beq.n	800503a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	603b      	str	r3, [r7, #0]
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	e7fd      	b.n	8005036 <xTaskIncrementTick+0x46>
 800503a:	4b44      	ldr	r3, [pc, #272]	@ (800514c <xTaskIncrementTick+0x15c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	4b43      	ldr	r3, [pc, #268]	@ (8005150 <xTaskIncrementTick+0x160>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a41      	ldr	r2, [pc, #260]	@ (800514c <xTaskIncrementTick+0x15c>)
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4a41      	ldr	r2, [pc, #260]	@ (8005150 <xTaskIncrementTick+0x160>)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	4b41      	ldr	r3, [pc, #260]	@ (8005154 <xTaskIncrementTick+0x164>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3301      	adds	r3, #1
 8005054:	4a3f      	ldr	r2, [pc, #252]	@ (8005154 <xTaskIncrementTick+0x164>)
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	f000 fada 	bl	8005610 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800505c:	4b3e      	ldr	r3, [pc, #248]	@ (8005158 <xTaskIncrementTick+0x168>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	429a      	cmp	r2, r3
 8005064:	d34e      	bcc.n	8005104 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005066:	4b39      	ldr	r3, [pc, #228]	@ (800514c <xTaskIncrementTick+0x15c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <xTaskIncrementTick+0x84>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <xTaskIncrementTick+0x86>
 8005074:	2300      	movs	r3, #0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800507a:	4b37      	ldr	r3, [pc, #220]	@ (8005158 <xTaskIncrementTick+0x168>)
 800507c:	f04f 32ff 	mov.w	r2, #4294967295
 8005080:	601a      	str	r2, [r3, #0]
					break;
 8005082:	e03f      	b.n	8005104 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005084:	4b31      	ldr	r3, [pc, #196]	@ (800514c <xTaskIncrementTick+0x15c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d203      	bcs.n	80050a4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800509c:	4a2e      	ldr	r2, [pc, #184]	@ (8005158 <xTaskIncrementTick+0x168>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6013      	str	r3, [r2, #0]
						break;
 80050a2:	e02f      	b.n	8005104 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe fdd7 	bl	8003c5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	3318      	adds	r3, #24
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fe fdce 	bl	8003c5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050c4:	4b25      	ldr	r3, [pc, #148]	@ (800515c <xTaskIncrementTick+0x16c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d903      	bls.n	80050d4 <xTaskIncrementTick+0xe4>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d0:	4a22      	ldr	r2, [pc, #136]	@ (800515c <xTaskIncrementTick+0x16c>)
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005160 <xTaskIncrementTick+0x170>)
 80050e2:	441a      	add	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	3304      	adds	r3, #4
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7fe fd5b 	bl	8003ba6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005164 <xTaskIncrementTick+0x174>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d3b3      	bcc.n	8005066 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80050fe:	2301      	movs	r3, #1
 8005100:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005102:	e7b0      	b.n	8005066 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005104:	4b17      	ldr	r3, [pc, #92]	@ (8005164 <xTaskIncrementTick+0x174>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510a:	4915      	ldr	r1, [pc, #84]	@ (8005160 <xTaskIncrementTick+0x170>)
 800510c:	4613      	mov	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	440b      	add	r3, r1
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d907      	bls.n	800512c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800511c:	2301      	movs	r3, #1
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e004      	b.n	800512c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005122:	4b11      	ldr	r3, [pc, #68]	@ (8005168 <xTaskIncrementTick+0x178>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	4a0f      	ldr	r2, [pc, #60]	@ (8005168 <xTaskIncrementTick+0x178>)
 800512a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800512c:	4b0f      	ldr	r3, [pc, #60]	@ (800516c <xTaskIncrementTick+0x17c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005138:	697b      	ldr	r3, [r7, #20]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000e30 	.word	0x20000e30
 8005148:	20000e0c 	.word	0x20000e0c
 800514c:	20000dc0 	.word	0x20000dc0
 8005150:	20000dc4 	.word	0x20000dc4
 8005154:	20000e20 	.word	0x20000e20
 8005158:	20000e28 	.word	0x20000e28
 800515c:	20000e10 	.word	0x20000e10
 8005160:	20000938 	.word	0x20000938
 8005164:	20000934 	.word	0x20000934
 8005168:	20000e18 	.word	0x20000e18
 800516c:	20000e1c 	.word	0x20000e1c

08005170 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005176:	4b28      	ldr	r3, [pc, #160]	@ (8005218 <vTaskSwitchContext+0xa8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800517e:	4b27      	ldr	r3, [pc, #156]	@ (800521c <vTaskSwitchContext+0xac>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005184:	e042      	b.n	800520c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005186:	4b25      	ldr	r3, [pc, #148]	@ (800521c <vTaskSwitchContext+0xac>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800518c:	4b24      	ldr	r3, [pc, #144]	@ (8005220 <vTaskSwitchContext+0xb0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	e011      	b.n	80051b8 <vTaskSwitchContext+0x48>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10b      	bne.n	80051b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	607b      	str	r3, [r7, #4]
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	e7fd      	b.n	80051ae <vTaskSwitchContext+0x3e>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3b01      	subs	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	491a      	ldr	r1, [pc, #104]	@ (8005224 <vTaskSwitchContext+0xb4>)
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d0e3      	beq.n	8005194 <vTaskSwitchContext+0x24>
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4a13      	ldr	r2, [pc, #76]	@ (8005224 <vTaskSwitchContext+0xb4>)
 80051d8:	4413      	add	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	3308      	adds	r3, #8
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d104      	bne.n	80051fc <vTaskSwitchContext+0x8c>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	4a09      	ldr	r2, [pc, #36]	@ (8005228 <vTaskSwitchContext+0xb8>)
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	4a06      	ldr	r2, [pc, #24]	@ (8005220 <vTaskSwitchContext+0xb0>)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6013      	str	r3, [r2, #0]
}
 800520c:	bf00      	nop
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20000e30 	.word	0x20000e30
 800521c:	20000e1c 	.word	0x20000e1c
 8005220:	20000e10 	.word	0x20000e10
 8005224:	20000938 	.word	0x20000938
 8005228:	20000934 	.word	0x20000934

0800522c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10b      	bne.n	8005254 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	60fb      	str	r3, [r7, #12]
}
 800524e:	bf00      	nop
 8005250:	bf00      	nop
 8005252:	e7fd      	b.n	8005250 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005254:	4b07      	ldr	r3, [pc, #28]	@ (8005274 <vTaskPlaceOnEventList+0x48>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3318      	adds	r3, #24
 800525a:	4619      	mov	r1, r3
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7fe fcc5 	bl	8003bec <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005262:	2101      	movs	r1, #1
 8005264:	6838      	ldr	r0, [r7, #0]
 8005266:	f000 fb8f 	bl	8005988 <prvAddCurrentTaskToDelayedList>
}
 800526a:	bf00      	nop
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000934 	.word	0x20000934

08005278 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	617b      	str	r3, [r7, #20]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052a2:	4b0a      	ldr	r3, [pc, #40]	@ (80052cc <vTaskPlaceOnEventListRestricted+0x54>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3318      	adds	r3, #24
 80052a8:	4619      	mov	r1, r3
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7fe fc7b 	bl	8003ba6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	68b8      	ldr	r0, [r7, #8]
 80052c0:	f000 fb62 	bl	8005988 <prvAddCurrentTaskToDelayedList>
	}
 80052c4:	bf00      	nop
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20000934 	.word	0x20000934

080052d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60fb      	str	r3, [r7, #12]
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	3318      	adds	r3, #24
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fcaa 	bl	8003c5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005308:	4b1d      	ldr	r3, [pc, #116]	@ (8005380 <xTaskRemoveFromEventList+0xb0>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d11d      	bne.n	800534c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	3304      	adds	r3, #4
 8005314:	4618      	mov	r0, r3
 8005316:	f7fe fca1 	bl	8003c5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531e:	4b19      	ldr	r3, [pc, #100]	@ (8005384 <xTaskRemoveFromEventList+0xb4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d903      	bls.n	800532e <xTaskRemoveFromEventList+0x5e>
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	4a16      	ldr	r2, [pc, #88]	@ (8005384 <xTaskRemoveFromEventList+0xb4>)
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005332:	4613      	mov	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4a13      	ldr	r2, [pc, #76]	@ (8005388 <xTaskRemoveFromEventList+0xb8>)
 800533c:	441a      	add	r2, r3
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	3304      	adds	r3, #4
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f7fe fc2e 	bl	8003ba6 <vListInsertEnd>
 800534a:	e005      	b.n	8005358 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	3318      	adds	r3, #24
 8005350:	4619      	mov	r1, r3
 8005352:	480e      	ldr	r0, [pc, #56]	@ (800538c <xTaskRemoveFromEventList+0xbc>)
 8005354:	f7fe fc27 	bl	8003ba6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800535c:	4b0c      	ldr	r3, [pc, #48]	@ (8005390 <xTaskRemoveFromEventList+0xc0>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005362:	429a      	cmp	r2, r3
 8005364:	d905      	bls.n	8005372 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005366:	2301      	movs	r3, #1
 8005368:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800536a:	4b0a      	ldr	r3, [pc, #40]	@ (8005394 <xTaskRemoveFromEventList+0xc4>)
 800536c:	2201      	movs	r2, #1
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e001      	b.n	8005376 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005376:	697b      	ldr	r3, [r7, #20]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	20000e30 	.word	0x20000e30
 8005384:	20000e10 	.word	0x20000e10
 8005388:	20000938 	.word	0x20000938
 800538c:	20000dc8 	.word	0x20000dc8
 8005390:	20000934 	.word	0x20000934
 8005394:	20000e1c 	.word	0x20000e1c

08005398 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053a0:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <vTaskInternalSetTimeOutState+0x24>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053a8:	4b05      	ldr	r3, [pc, #20]	@ (80053c0 <vTaskInternalSetTimeOutState+0x28>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	605a      	str	r2, [r3, #4]
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000e20 	.word	0x20000e20
 80053c0:	20000e0c 	.word	0x20000e0c

080053c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10b      	bne.n	80053ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	613b      	str	r3, [r7, #16]
}
 80053e6:	bf00      	nop
 80053e8:	bf00      	nop
 80053ea:	e7fd      	b.n	80053e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	60fb      	str	r3, [r7, #12]
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop
 8005408:	e7fd      	b.n	8005406 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800540a:	f000 ff1f 	bl	800624c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800540e:	4b1d      	ldr	r3, [pc, #116]	@ (8005484 <xTaskCheckForTimeOut+0xc0>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d102      	bne.n	800542e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	e023      	b.n	8005476 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b15      	ldr	r3, [pc, #84]	@ (8005488 <xTaskCheckForTimeOut+0xc4>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d007      	beq.n	800544a <xTaskCheckForTimeOut+0x86>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	69ba      	ldr	r2, [r7, #24]
 8005440:	429a      	cmp	r2, r3
 8005442:	d302      	bcc.n	800544a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	e015      	b.n	8005476 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	429a      	cmp	r2, r3
 8005452:	d20b      	bcs.n	800546c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	1ad2      	subs	r2, r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff ff99 	bl	8005398 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e004      	b.n	8005476 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005472:	2301      	movs	r3, #1
 8005474:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005476:	f000 ff19 	bl	80062ac <vPortExitCritical>

	return xReturn;
 800547a:	69fb      	ldr	r3, [r7, #28]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000e0c 	.word	0x20000e0c
 8005488:	20000e20 	.word	0x20000e20

0800548c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005490:	4b03      	ldr	r3, [pc, #12]	@ (80054a0 <vTaskMissedYield+0x14>)
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]
}
 8005496:	bf00      	nop
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000e1c 	.word	0x20000e1c

080054a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054ac:	f000 f852 	bl	8005554 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054b0:	4b06      	ldr	r3, [pc, #24]	@ (80054cc <prvIdleTask+0x28>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d9f9      	bls.n	80054ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80054b8:	4b05      	ldr	r3, [pc, #20]	@ (80054d0 <prvIdleTask+0x2c>)
 80054ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054c8:	e7f0      	b.n	80054ac <prvIdleTask+0x8>
 80054ca:	bf00      	nop
 80054cc:	20000938 	.word	0x20000938
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054da:	2300      	movs	r3, #0
 80054dc:	607b      	str	r3, [r7, #4]
 80054de:	e00c      	b.n	80054fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4a12      	ldr	r2, [pc, #72]	@ (8005534 <prvInitialiseTaskLists+0x60>)
 80054ec:	4413      	add	r3, r2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7fe fb2e 	bl	8003b50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3301      	adds	r3, #1
 80054f8:	607b      	str	r3, [r7, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b37      	cmp	r3, #55	@ 0x37
 80054fe:	d9ef      	bls.n	80054e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005500:	480d      	ldr	r0, [pc, #52]	@ (8005538 <prvInitialiseTaskLists+0x64>)
 8005502:	f7fe fb25 	bl	8003b50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005506:	480d      	ldr	r0, [pc, #52]	@ (800553c <prvInitialiseTaskLists+0x68>)
 8005508:	f7fe fb22 	bl	8003b50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800550c:	480c      	ldr	r0, [pc, #48]	@ (8005540 <prvInitialiseTaskLists+0x6c>)
 800550e:	f7fe fb1f 	bl	8003b50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005512:	480c      	ldr	r0, [pc, #48]	@ (8005544 <prvInitialiseTaskLists+0x70>)
 8005514:	f7fe fb1c 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005518:	480b      	ldr	r0, [pc, #44]	@ (8005548 <prvInitialiseTaskLists+0x74>)
 800551a:	f7fe fb19 	bl	8003b50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800551e:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <prvInitialiseTaskLists+0x78>)
 8005520:	4a05      	ldr	r2, [pc, #20]	@ (8005538 <prvInitialiseTaskLists+0x64>)
 8005522:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005524:	4b0a      	ldr	r3, [pc, #40]	@ (8005550 <prvInitialiseTaskLists+0x7c>)
 8005526:	4a05      	ldr	r2, [pc, #20]	@ (800553c <prvInitialiseTaskLists+0x68>)
 8005528:	601a      	str	r2, [r3, #0]
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000938 	.word	0x20000938
 8005538:	20000d98 	.word	0x20000d98
 800553c:	20000dac 	.word	0x20000dac
 8005540:	20000dc8 	.word	0x20000dc8
 8005544:	20000ddc 	.word	0x20000ddc
 8005548:	20000df4 	.word	0x20000df4
 800554c:	20000dc0 	.word	0x20000dc0
 8005550:	20000dc4 	.word	0x20000dc4

08005554 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800555a:	e019      	b.n	8005590 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800555c:	f000 fe76 	bl	800624c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005560:	4b10      	ldr	r3, [pc, #64]	@ (80055a4 <prvCheckTasksWaitingTermination+0x50>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fb75 	bl	8003c5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005572:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <prvCheckTasksWaitingTermination+0x54>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3b01      	subs	r3, #1
 8005578:	4a0b      	ldr	r2, [pc, #44]	@ (80055a8 <prvCheckTasksWaitingTermination+0x54>)
 800557a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800557c:	4b0b      	ldr	r3, [pc, #44]	@ (80055ac <prvCheckTasksWaitingTermination+0x58>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3b01      	subs	r3, #1
 8005582:	4a0a      	ldr	r2, [pc, #40]	@ (80055ac <prvCheckTasksWaitingTermination+0x58>)
 8005584:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005586:	f000 fe91 	bl	80062ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f810 	bl	80055b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005590:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <prvCheckTasksWaitingTermination+0x58>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e1      	bne.n	800555c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000ddc 	.word	0x20000ddc
 80055a8:	20000e08 	.word	0x20000e08
 80055ac:	20000df0 	.word	0x20000df0

080055b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d108      	bne.n	80055d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c6:	4618      	mov	r0, r3
 80055c8:	f001 f80a 	bl	80065e0 <vPortFree>
				vPortFree( pxTCB );
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f001 f807 	bl	80065e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055d2:	e019      	b.n	8005608 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d103      	bne.n	80055e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fffe 	bl	80065e0 <vPortFree>
	}
 80055e4:	e010      	b.n	8005608 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d00b      	beq.n	8005608 <prvDeleteTCB+0x58>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60fb      	str	r3, [r7, #12]
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <prvDeleteTCB+0x54>
	}
 8005608:	bf00      	nop
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005616:	4b0e      	ldr	r3, [pc, #56]	@ (8005650 <prvResetNextTaskUnblockTime+0x40>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <prvResetNextTaskUnblockTime+0x14>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <prvResetNextTaskUnblockTime+0x16>
 8005624:	2300      	movs	r3, #0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d004      	beq.n	8005634 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800562a:	4b0a      	ldr	r3, [pc, #40]	@ (8005654 <prvResetNextTaskUnblockTime+0x44>)
 800562c:	f04f 32ff 	mov.w	r2, #4294967295
 8005630:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005632:	e008      	b.n	8005646 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005634:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <prvResetNextTaskUnblockTime+0x40>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4a04      	ldr	r2, [pc, #16]	@ (8005654 <prvResetNextTaskUnblockTime+0x44>)
 8005644:	6013      	str	r3, [r2, #0]
}
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr
 8005650:	20000dc0 	.word	0x20000dc0
 8005654:	20000e28 	.word	0x20000e28

08005658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800565e:	4b0b      	ldr	r3, [pc, #44]	@ (800568c <xTaskGetSchedulerState+0x34>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005666:	2301      	movs	r3, #1
 8005668:	607b      	str	r3, [r7, #4]
 800566a:	e008      	b.n	800567e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566c:	4b08      	ldr	r3, [pc, #32]	@ (8005690 <xTaskGetSchedulerState+0x38>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d102      	bne.n	800567a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005674:	2302      	movs	r3, #2
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	e001      	b.n	800567e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800567a:	2300      	movs	r3, #0
 800567c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800567e:	687b      	ldr	r3, [r7, #4]
	}
 8005680:	4618      	mov	r0, r3
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	20000e14 	.word	0x20000e14
 8005690:	20000e30 	.word	0x20000e30

08005694 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d056      	beq.n	8005758 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005764 <xTaskPriorityInherit+0xd0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d246      	bcs.n	8005746 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	db06      	blt.n	80056ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c0:	4b28      	ldr	r3, [pc, #160]	@ (8005764 <xTaskPriorityInherit+0xd0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6959      	ldr	r1, [r3, #20]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4a22      	ldr	r2, [pc, #136]	@ (8005768 <xTaskPriorityInherit+0xd4>)
 80056e0:	4413      	add	r3, r2
 80056e2:	4299      	cmp	r1, r3
 80056e4:	d101      	bne.n	80056ea <xTaskPriorityInherit+0x56>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <xTaskPriorityInherit+0x58>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d022      	beq.n	8005736 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fe fab1 	bl	8003c5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80056fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005764 <xTaskPriorityInherit+0xd0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005708:	4b18      	ldr	r3, [pc, #96]	@ (800576c <xTaskPriorityInherit+0xd8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d903      	bls.n	8005718 <xTaskPriorityInherit+0x84>
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	4a15      	ldr	r2, [pc, #84]	@ (800576c <xTaskPriorityInherit+0xd8>)
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4a10      	ldr	r2, [pc, #64]	@ (8005768 <xTaskPriorityInherit+0xd4>)
 8005726:	441a      	add	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7fe fa39 	bl	8003ba6 <vListInsertEnd>
 8005734:	e004      	b.n	8005740 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005736:	4b0b      	ldr	r3, [pc, #44]	@ (8005764 <xTaskPriorityInherit+0xd0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	e008      	b.n	8005758 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800574a:	4b06      	ldr	r3, [pc, #24]	@ (8005764 <xTaskPriorityInherit+0xd0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	429a      	cmp	r2, r3
 8005752:	d201      	bcs.n	8005758 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005758:	68fb      	ldr	r3, [r7, #12]
	}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000934 	.word	0x20000934
 8005768:	20000938 	.word	0x20000938
 800576c:	20000e10 	.word	0x20000e10

08005770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d058      	beq.n	8005838 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005786:	4b2f      	ldr	r3, [pc, #188]	@ (8005844 <xTaskPriorityDisinherit+0xd4>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	429a      	cmp	r2, r3
 800578e:	d00b      	beq.n	80057a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	60fb      	str	r3, [r7, #12]
}
 80057a2:	bf00      	nop
 80057a4:	bf00      	nop
 80057a6:	e7fd      	b.n	80057a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10b      	bne.n	80057c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	60bb      	str	r3, [r7, #8]
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	e7fd      	b.n	80057c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057cc:	1e5a      	subs	r2, r3, #1
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057da:	429a      	cmp	r2, r3
 80057dc:	d02c      	beq.n	8005838 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d128      	bne.n	8005838 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	3304      	adds	r3, #4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fa36 	bl	8003c5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005808:	4b0f      	ldr	r3, [pc, #60]	@ (8005848 <xTaskPriorityDisinherit+0xd8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d903      	bls.n	8005818 <xTaskPriorityDisinherit+0xa8>
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005814:	4a0c      	ldr	r2, [pc, #48]	@ (8005848 <xTaskPriorityDisinherit+0xd8>)
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4a09      	ldr	r2, [pc, #36]	@ (800584c <xTaskPriorityDisinherit+0xdc>)
 8005826:	441a      	add	r2, r3
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	3304      	adds	r3, #4
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	f7fe f9b9 	bl	8003ba6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005834:	2301      	movs	r3, #1
 8005836:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005838:	697b      	ldr	r3, [r7, #20]
	}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000934 	.word	0x20000934
 8005848:	20000e10 	.word	0x20000e10
 800584c:	20000938 	.word	0x20000938

08005850 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800585e:	2301      	movs	r3, #1
 8005860:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d071      	beq.n	800594c <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10b      	bne.n	8005888 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	60fb      	str	r3, [r7, #12]
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d902      	bls.n	8005898 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	e002      	b.n	800589e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800589c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	69fa      	ldr	r2, [r7, #28]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d051      	beq.n	800594c <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d14c      	bne.n	800594c <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80058b2:	4b28      	ldr	r3, [pc, #160]	@ (8005954 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d10b      	bne.n	80058d4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	60bb      	str	r3, [r7, #8]
}
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	e7fd      	b.n	80058d0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	69fa      	ldr	r2, [r7, #28]
 80058de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	db04      	blt.n	80058f2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	6959      	ldr	r1, [r3, #20]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4a15      	ldr	r2, [pc, #84]	@ (8005958 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005902:	4413      	add	r3, r2
 8005904:	4299      	cmp	r1, r3
 8005906:	d101      	bne.n	800590c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 800590c:	2300      	movs	r3, #0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d01c      	beq.n	800594c <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	3304      	adds	r3, #4
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe f9a0 	bl	8003c5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005920:	4b0e      	ldr	r3, [pc, #56]	@ (800595c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d903      	bls.n	8005930 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592c:	4a0b      	ldr	r2, [pc, #44]	@ (800595c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4a06      	ldr	r2, [pc, #24]	@ (8005958 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800593e:	441a      	add	r2, r3
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f7fe f92d 	bl	8003ba6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800594c:	bf00      	nop
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000934 	.word	0x20000934
 8005958:	20000938 	.word	0x20000938
 800595c:	20000e10 	.word	0x20000e10

08005960 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005964:	4b07      	ldr	r3, [pc, #28]	@ (8005984 <pvTaskIncrementMutexHeldCount+0x24>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d004      	beq.n	8005976 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800596c:	4b05      	ldr	r3, [pc, #20]	@ (8005984 <pvTaskIncrementMutexHeldCount+0x24>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005972:	3201      	adds	r2, #1
 8005974:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005976:	4b03      	ldr	r3, [pc, #12]	@ (8005984 <pvTaskIncrementMutexHeldCount+0x24>)
 8005978:	681b      	ldr	r3, [r3, #0]
	}
 800597a:	4618      	mov	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000934 	.word	0x20000934

08005988 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005992:	4b21      	ldr	r3, [pc, #132]	@ (8005a18 <prvAddCurrentTaskToDelayedList+0x90>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005998:	4b20      	ldr	r3, [pc, #128]	@ (8005a1c <prvAddCurrentTaskToDelayedList+0x94>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	3304      	adds	r3, #4
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fe f95c 	bl	8003c5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059aa:	d10a      	bne.n	80059c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d007      	beq.n	80059c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059b2:	4b1a      	ldr	r3, [pc, #104]	@ (8005a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4619      	mov	r1, r3
 80059ba:	4819      	ldr	r0, [pc, #100]	@ (8005a20 <prvAddCurrentTaskToDelayedList+0x98>)
 80059bc:	f7fe f8f3 	bl	8003ba6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059c0:	e026      	b.n	8005a10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4413      	add	r3, r2
 80059c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059ca:	4b14      	ldr	r3, [pc, #80]	@ (8005a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d209      	bcs.n	80059ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059da:	4b12      	ldr	r3, [pc, #72]	@ (8005a24 <prvAddCurrentTaskToDelayedList+0x9c>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4b0f      	ldr	r3, [pc, #60]	@ (8005a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f7fe f900 	bl	8003bec <vListInsert>
}
 80059ec:	e010      	b.n	8005a10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005a28 <prvAddCurrentTaskToDelayedList+0xa0>)
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4b0a      	ldr	r3, [pc, #40]	@ (8005a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f7fe f8f6 	bl	8003bec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a00:	4b0a      	ldr	r3, [pc, #40]	@ (8005a2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d202      	bcs.n	8005a10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a0a:	4a08      	ldr	r2, [pc, #32]	@ (8005a2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6013      	str	r3, [r2, #0]
}
 8005a10:	bf00      	nop
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000e0c 	.word	0x20000e0c
 8005a1c:	20000934 	.word	0x20000934
 8005a20:	20000df4 	.word	0x20000df4
 8005a24:	20000dc4 	.word	0x20000dc4
 8005a28:	20000dc0 	.word	0x20000dc0
 8005a2c:	20000e28 	.word	0x20000e28

08005a30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	@ 0x28
 8005a34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a3a:	f000 fad9 	bl	8005ff0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab4 <xTimerCreateTimerTask+0x84>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d021      	beq.n	8005a8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a4e:	1d3a      	adds	r2, r7, #4
 8005a50:	f107 0108 	add.w	r1, r7, #8
 8005a54:	f107 030c 	add.w	r3, r7, #12
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe f85f 	bl	8003b1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	9202      	str	r2, [sp, #8]
 8005a66:	9301      	str	r3, [sp, #4]
 8005a68:	2302      	movs	r3, #2
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	460a      	mov	r2, r1
 8005a70:	4911      	ldr	r1, [pc, #68]	@ (8005ab8 <xTimerCreateTimerTask+0x88>)
 8005a72:	4812      	ldr	r0, [pc, #72]	@ (8005abc <xTimerCreateTimerTask+0x8c>)
 8005a74:	f7fe ffc8 	bl	8004a08 <xTaskCreateStatic>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	4a11      	ldr	r2, [pc, #68]	@ (8005ac0 <xTimerCreateTimerTask+0x90>)
 8005a7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005a7e:	4b10      	ldr	r3, [pc, #64]	@ (8005ac0 <xTimerCreateTimerTask+0x90>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005a86:	2301      	movs	r3, #1
 8005a88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10b      	bne.n	8005aa8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	613b      	str	r3, [r7, #16]
}
 8005aa2:	bf00      	nop
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005aa8:	697b      	ldr	r3, [r7, #20]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000e64 	.word	0x20000e64
 8005ab8:	080068b4 	.word	0x080068b4
 8005abc:	08005be5 	.word	0x08005be5
 8005ac0:	20000e68 	.word	0x20000e68

08005ac4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08a      	sub	sp, #40	@ 0x28
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10b      	bne.n	8005af4 <xTimerGenericCommand+0x30>
	__asm volatile
 8005adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae0:	f383 8811 	msr	BASEPRI, r3
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	623b      	str	r3, [r7, #32]
}
 8005aee:	bf00      	nop
 8005af0:	bf00      	nop
 8005af2:	e7fd      	b.n	8005af0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005af4:	4b19      	ldr	r3, [pc, #100]	@ (8005b5c <xTimerGenericCommand+0x98>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02a      	beq.n	8005b52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b05      	cmp	r3, #5
 8005b0c:	dc18      	bgt.n	8005b40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b0e:	f7ff fda3 	bl	8005658 <xTaskGetSchedulerState>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d109      	bne.n	8005b2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b18:	4b10      	ldr	r3, [pc, #64]	@ (8005b5c <xTimerGenericCommand+0x98>)
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	f107 0110 	add.w	r1, r7, #16
 8005b20:	2300      	movs	r3, #0
 8005b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b24:	f7fe fa3e 	bl	8003fa4 <xQueueGenericSend>
 8005b28:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b2a:	e012      	b.n	8005b52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b5c <xTimerGenericCommand+0x98>)
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	f107 0110 	add.w	r1, r7, #16
 8005b34:	2300      	movs	r3, #0
 8005b36:	2200      	movs	r2, #0
 8005b38:	f7fe fa34 	bl	8003fa4 <xQueueGenericSend>
 8005b3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b3e:	e008      	b.n	8005b52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b40:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <xTimerGenericCommand+0x98>)
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	f107 0110 	add.w	r1, r7, #16
 8005b48:	2300      	movs	r3, #0
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	f7fe fb2c 	bl	80041a8 <xQueueGenericSendFromISR>
 8005b50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3728      	adds	r7, #40	@ 0x28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000e64 	.word	0x20000e64

08005b60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005be0 <prvProcessExpiredTimer+0x80>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe f86f 	bl	8003c5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d123      	bne.n	8005bce <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	18d1      	adds	r1, r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	6978      	ldr	r0, [r7, #20]
 8005b94:	f000 f8cc 	bl	8005d30 <prvInsertTimerInActiveList>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d017      	beq.n	8005bce <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	6978      	ldr	r0, [r7, #20]
 8005baa:	f7ff ff8b 	bl	8005ac4 <xTimerGenericCommand>
 8005bae:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10b      	bne.n	8005bce <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	60fb      	str	r3, [r7, #12]
}
 8005bc8:	bf00      	nop
 8005bca:	bf00      	nop
 8005bcc:	e7fd      	b.n	8005bca <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd2:	6978      	ldr	r0, [r7, #20]
 8005bd4:	4798      	blx	r3
}
 8005bd6:	bf00      	nop
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000e5c 	.word	0x20000e5c

08005be4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005bec:	f107 0308 	add.w	r3, r7, #8
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 f859 	bl	8005ca8 <prvGetNextExpireTime>
 8005bf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f805 	bl	8005c0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c02:	f000 f8d7 	bl	8005db4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c06:	bf00      	nop
 8005c08:	e7f0      	b.n	8005bec <prvTimerTask+0x8>
	...

08005c0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c16:	f7ff f931 	bl	8004e7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c1a:	f107 0308 	add.w	r3, r7, #8
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 f866 	bl	8005cf0 <prvSampleTimeNow>
 8005c24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d130      	bne.n	8005c8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <prvProcessTimerOrBlockTask+0x3c>
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d806      	bhi.n	8005c48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c3a:	f7ff f92d 	bl	8004e98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff ff8d 	bl	8005b60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c46:	e024      	b.n	8005c92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c4e:	4b13      	ldr	r3, [pc, #76]	@ (8005c9c <prvProcessTimerOrBlockTask+0x90>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c60:	4b0f      	ldr	r3, [pc, #60]	@ (8005ca0 <prvProcessTimerOrBlockTask+0x94>)
 8005c62:	6818      	ldr	r0, [r3, #0]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f7fe fe97 	bl	80049a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c72:	f7ff f911 	bl	8004e98 <xTaskResumeAll>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10a      	bne.n	8005c92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ca4 <prvProcessTimerOrBlockTask+0x98>)
 8005c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	f3bf 8f6f 	isb	sy
}
 8005c8c:	e001      	b.n	8005c92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c8e:	f7ff f903 	bl	8004e98 <xTaskResumeAll>
}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000e60 	.word	0x20000e60
 8005ca0:	20000e64 	.word	0x20000e64
 8005ca4:	e000ed04 	.word	0xe000ed04

08005ca8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8005cec <prvGetNextExpireTime+0x44>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bf0c      	ite	eq
 8005cba:	2301      	moveq	r3, #1
 8005cbc:	2300      	movne	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d105      	bne.n	8005cda <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cce:	4b07      	ldr	r3, [pc, #28]	@ (8005cec <prvGetNextExpireTime+0x44>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	e001      	b.n	8005cde <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005cde:	68fb      	ldr	r3, [r7, #12]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	20000e5c 	.word	0x20000e5c

08005cf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005cf8:	f7ff f96c 	bl	8004fd4 <xTaskGetTickCount>
 8005cfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8005d2c <prvSampleTimeNow+0x3c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d205      	bcs.n	8005d14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d08:	f000 f910 	bl	8005f2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e002      	b.n	8005d1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d1a:	4a04      	ldr	r2, [pc, #16]	@ (8005d2c <prvSampleTimeNow+0x3c>)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d20:	68fb      	ldr	r3, [r7, #12]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000e6c 	.word	0x20000e6c

08005d30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d812      	bhi.n	8005d7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	1ad2      	subs	r2, r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d302      	bcc.n	8005d6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d64:	2301      	movs	r3, #1
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	e01b      	b.n	8005da2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d6a:	4b10      	ldr	r3, [pc, #64]	@ (8005dac <prvInsertTimerInActiveList+0x7c>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f7fd ff39 	bl	8003bec <vListInsert>
 8005d7a:	e012      	b.n	8005da2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d206      	bcs.n	8005d92 <prvInsertTimerInActiveList+0x62>
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d302      	bcc.n	8005d92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	e007      	b.n	8005da2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d92:	4b07      	ldr	r3, [pc, #28]	@ (8005db0 <prvInsertTimerInActiveList+0x80>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	f7fd ff25 	bl	8003bec <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005da2:	697b      	ldr	r3, [r7, #20]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20000e60 	.word	0x20000e60
 8005db0:	20000e5c 	.word	0x20000e5c

08005db4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08e      	sub	sp, #56	@ 0x38
 8005db8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dba:	e0a5      	b.n	8005f08 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	da19      	bge.n	8005df6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005dc2:	1d3b      	adds	r3, r7, #4
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10b      	bne.n	8005de6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	61fb      	str	r3, [r7, #28]
}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	e7fd      	b.n	8005de2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dec:	6850      	ldr	r0, [r2, #4]
 8005dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005df0:	6892      	ldr	r2, [r2, #8]
 8005df2:	4611      	mov	r1, r2
 8005df4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f2c0 8085 	blt.w	8005f08 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fd ff24 	bl	8003c5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e14:	463b      	mov	r3, r7
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff ff6a 	bl	8005cf0 <prvSampleTimeNow>
 8005e1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b09      	cmp	r3, #9
 8005e22:	d86c      	bhi.n	8005efe <prvProcessReceivedCommands+0x14a>
 8005e24:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <prvProcessReceivedCommands+0x78>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e55 	.word	0x08005e55
 8005e30:	08005e55 	.word	0x08005e55
 8005e34:	08005e55 	.word	0x08005e55
 8005e38:	08005eff 	.word	0x08005eff
 8005e3c:	08005eb3 	.word	0x08005eb3
 8005e40:	08005eed 	.word	0x08005eed
 8005e44:	08005e55 	.word	0x08005e55
 8005e48:	08005e55 	.word	0x08005e55
 8005e4c:	08005eff 	.word	0x08005eff
 8005e50:	08005eb3 	.word	0x08005eb3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	18d1      	adds	r1, r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e62:	f7ff ff65 	bl	8005d30 <prvInsertTimerInActiveList>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d04a      	beq.n	8005f02 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e72:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d142      	bne.n	8005f02 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	441a      	add	r2, r3
 8005e84:	2300      	movs	r3, #0
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e8e:	f7ff fe19 	bl	8005ac4 <xTimerGenericCommand>
 8005e92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d133      	bne.n	8005f02 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	61bb      	str	r3, [r7, #24]
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	e7fd      	b.n	8005eae <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10b      	bne.n	8005ed8 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	617b      	str	r3, [r7, #20]
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eda:	699a      	ldr	r2, [r3, #24]
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	18d1      	adds	r1, r2, r3
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ee6:	f7ff ff23 	bl	8005d30 <prvInsertTimerInActiveList>
					break;
 8005eea:	e00d      	b.n	8005f08 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ef8:	f000 fb72 	bl	80065e0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005efc:	e003      	b.n	8005f06 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005efe:	bf00      	nop
 8005f00:	e002      	b.n	8005f08 <prvProcessReceivedCommands+0x154>
					break;
 8005f02:	bf00      	nop
 8005f04:	e000      	b.n	8005f08 <prvProcessReceivedCommands+0x154>
					break;
 8005f06:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f08:	4b07      	ldr	r3, [pc, #28]	@ (8005f28 <prvProcessReceivedCommands+0x174>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	1d39      	adds	r1, r7, #4
 8005f0e:	2200      	movs	r2, #0
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe f9e5 	bl	80042e0 <xQueueReceive>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f47f af4f 	bne.w	8005dbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	3730      	adds	r7, #48	@ 0x30
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000e64 	.word	0x20000e64

08005f2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b088      	sub	sp, #32
 8005f30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f32:	e046      	b.n	8005fc2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f34:	4b2c      	ldr	r3, [pc, #176]	@ (8005fe8 <prvSwitchTimerLists+0xbc>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8005fe8 <prvSwitchTimerLists+0xbc>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fd fe85 	bl	8003c5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d12f      	bne.n	8005fc2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4413      	add	r3, r2
 8005f6a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d90e      	bls.n	8005f92 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f80:	4b19      	ldr	r3, [pc, #100]	@ (8005fe8 <prvSwitchTimerLists+0xbc>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f7fd fe2e 	bl	8003bec <vListInsert>
 8005f90:	e017      	b.n	8005fc2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f92:	2300      	movs	r3, #0
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	2300      	movs	r3, #0
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7ff fd91 	bl	8005ac4 <xTimerGenericCommand>
 8005fa2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10b      	bne.n	8005fc2 <prvSwitchTimerLists+0x96>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	603b      	str	r3, [r7, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	e7fd      	b.n	8005fbe <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fc2:	4b09      	ldr	r3, [pc, #36]	@ (8005fe8 <prvSwitchTimerLists+0xbc>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1b3      	bne.n	8005f34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005fcc:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <prvSwitchTimerLists+0xbc>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005fd2:	4b06      	ldr	r3, [pc, #24]	@ (8005fec <prvSwitchTimerLists+0xc0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a04      	ldr	r2, [pc, #16]	@ (8005fe8 <prvSwitchTimerLists+0xbc>)
 8005fd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005fda:	4a04      	ldr	r2, [pc, #16]	@ (8005fec <prvSwitchTimerLists+0xc0>)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	6013      	str	r3, [r2, #0]
}
 8005fe0:	bf00      	nop
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000e5c 	.word	0x20000e5c
 8005fec:	20000e60 	.word	0x20000e60

08005ff0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ff6:	f000 f929 	bl	800624c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ffa:	4b15      	ldr	r3, [pc, #84]	@ (8006050 <prvCheckForValidListAndQueue+0x60>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d120      	bne.n	8006044 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006002:	4814      	ldr	r0, [pc, #80]	@ (8006054 <prvCheckForValidListAndQueue+0x64>)
 8006004:	f7fd fda4 	bl	8003b50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006008:	4813      	ldr	r0, [pc, #76]	@ (8006058 <prvCheckForValidListAndQueue+0x68>)
 800600a:	f7fd fda1 	bl	8003b50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800600e:	4b13      	ldr	r3, [pc, #76]	@ (800605c <prvCheckForValidListAndQueue+0x6c>)
 8006010:	4a10      	ldr	r2, [pc, #64]	@ (8006054 <prvCheckForValidListAndQueue+0x64>)
 8006012:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006014:	4b12      	ldr	r3, [pc, #72]	@ (8006060 <prvCheckForValidListAndQueue+0x70>)
 8006016:	4a10      	ldr	r2, [pc, #64]	@ (8006058 <prvCheckForValidListAndQueue+0x68>)
 8006018:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800601a:	2300      	movs	r3, #0
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	4b11      	ldr	r3, [pc, #68]	@ (8006064 <prvCheckForValidListAndQueue+0x74>)
 8006020:	4a11      	ldr	r2, [pc, #68]	@ (8006068 <prvCheckForValidListAndQueue+0x78>)
 8006022:	2110      	movs	r1, #16
 8006024:	200a      	movs	r0, #10
 8006026:	f7fd fead 	bl	8003d84 <xQueueGenericCreateStatic>
 800602a:	4603      	mov	r3, r0
 800602c:	4a08      	ldr	r2, [pc, #32]	@ (8006050 <prvCheckForValidListAndQueue+0x60>)
 800602e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006030:	4b07      	ldr	r3, [pc, #28]	@ (8006050 <prvCheckForValidListAndQueue+0x60>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d005      	beq.n	8006044 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006038:	4b05      	ldr	r3, [pc, #20]	@ (8006050 <prvCheckForValidListAndQueue+0x60>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	490b      	ldr	r1, [pc, #44]	@ (800606c <prvCheckForValidListAndQueue+0x7c>)
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fc86 	bl	8004950 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006044:	f000 f932 	bl	80062ac <vPortExitCritical>
}
 8006048:	bf00      	nop
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000e64 	.word	0x20000e64
 8006054:	20000e34 	.word	0x20000e34
 8006058:	20000e48 	.word	0x20000e48
 800605c:	20000e5c 	.word	0x20000e5c
 8006060:	20000e60 	.word	0x20000e60
 8006064:	20000f10 	.word	0x20000f10
 8006068:	20000e70 	.word	0x20000e70
 800606c:	080068bc 	.word	0x080068bc

08006070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3b04      	subs	r3, #4
 8006080:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3b04      	subs	r3, #4
 800608e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f023 0201 	bic.w	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3b04      	subs	r3, #4
 800609e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060a0:	4a08      	ldr	r2, [pc, #32]	@ (80060c4 <pxPortInitialiseStack+0x54>)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3b14      	subs	r3, #20
 80060aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3b20      	subs	r3, #32
 80060b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060b8:	68fb      	ldr	r3, [r7, #12]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr
 80060c4:	080060c9 	.word	0x080060c9

080060c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060d2:	4b12      	ldr	r3, [pc, #72]	@ (800611c <prvTaskExitError+0x54>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d00b      	beq.n	80060f4 <prvTaskExitError+0x2c>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	60fb      	str	r3, [r7, #12]
}
 80060ee:	bf00      	nop
 80060f0:	bf00      	nop
 80060f2:	e7fd      	b.n	80060f0 <prvTaskExitError+0x28>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	60bb      	str	r3, [r7, #8]
}
 8006106:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006108:	bf00      	nop
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0fc      	beq.n	800610a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr
 800611c:	20000010 	.word	0x20000010

08006120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006120:	4b07      	ldr	r3, [pc, #28]	@ (8006140 <pxCurrentTCBConst2>)
 8006122:	6819      	ldr	r1, [r3, #0]
 8006124:	6808      	ldr	r0, [r1, #0]
 8006126:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800612a:	f380 8809 	msr	PSP, r0
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f04f 0000 	mov.w	r0, #0
 8006136:	f380 8811 	msr	BASEPRI, r0
 800613a:	f04e 0e0d 	orr.w	lr, lr, #13
 800613e:	4770      	bx	lr

08006140 <pxCurrentTCBConst2>:
 8006140:	20000934 	.word	0x20000934
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop

08006148 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006148:	4806      	ldr	r0, [pc, #24]	@ (8006164 <prvPortStartFirstTask+0x1c>)
 800614a:	6800      	ldr	r0, [r0, #0]
 800614c:	6800      	ldr	r0, [r0, #0]
 800614e:	f380 8808 	msr	MSP, r0
 8006152:	b662      	cpsie	i
 8006154:	b661      	cpsie	f
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	df00      	svc	0
 8006160:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006162:	bf00      	nop
 8006164:	e000ed08 	.word	0xe000ed08

08006168 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800616e:	4b32      	ldr	r3, [pc, #200]	@ (8006238 <xPortStartScheduler+0xd0>)
 8006170:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	22ff      	movs	r2, #255	@ 0xff
 800617e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006190:	b2da      	uxtb	r2, r3
 8006192:	4b2a      	ldr	r3, [pc, #168]	@ (800623c <xPortStartScheduler+0xd4>)
 8006194:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006196:	4b2a      	ldr	r3, [pc, #168]	@ (8006240 <xPortStartScheduler+0xd8>)
 8006198:	2207      	movs	r2, #7
 800619a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800619c:	e009      	b.n	80061b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800619e:	4b28      	ldr	r3, [pc, #160]	@ (8006240 <xPortStartScheduler+0xd8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	4a26      	ldr	r2, [pc, #152]	@ (8006240 <xPortStartScheduler+0xd8>)
 80061a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ba:	2b80      	cmp	r3, #128	@ 0x80
 80061bc:	d0ef      	beq.n	800619e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061be:	4b20      	ldr	r3, [pc, #128]	@ (8006240 <xPortStartScheduler+0xd8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f1c3 0307 	rsb	r3, r3, #7
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d00b      	beq.n	80061e2 <xPortStartScheduler+0x7a>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	60bb      	str	r3, [r7, #8]
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	e7fd      	b.n	80061de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061e2:	4b17      	ldr	r3, [pc, #92]	@ (8006240 <xPortStartScheduler+0xd8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	021b      	lsls	r3, r3, #8
 80061e8:	4a15      	ldr	r2, [pc, #84]	@ (8006240 <xPortStartScheduler+0xd8>)
 80061ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80061ec:	4b14      	ldr	r3, [pc, #80]	@ (8006240 <xPortStartScheduler+0xd8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061f4:	4a12      	ldr	r2, [pc, #72]	@ (8006240 <xPortStartScheduler+0xd8>)
 80061f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006200:	4b10      	ldr	r3, [pc, #64]	@ (8006244 <xPortStartScheduler+0xdc>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a0f      	ldr	r2, [pc, #60]	@ (8006244 <xPortStartScheduler+0xdc>)
 8006206:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800620a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800620c:	4b0d      	ldr	r3, [pc, #52]	@ (8006244 <xPortStartScheduler+0xdc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a0c      	ldr	r2, [pc, #48]	@ (8006244 <xPortStartScheduler+0xdc>)
 8006212:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006216:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006218:	f000 f8b8 	bl	800638c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800621c:	4b0a      	ldr	r3, [pc, #40]	@ (8006248 <xPortStartScheduler+0xe0>)
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006222:	f7ff ff91 	bl	8006148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006226:	f7fe ffa3 	bl	8005170 <vTaskSwitchContext>
	prvTaskExitError();
 800622a:	f7ff ff4d 	bl	80060c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	e000e400 	.word	0xe000e400
 800623c:	20000f60 	.word	0x20000f60
 8006240:	20000f64 	.word	0x20000f64
 8006244:	e000ed20 	.word	0xe000ed20
 8006248:	20000010 	.word	0x20000010

0800624c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	607b      	str	r3, [r7, #4]
}
 8006264:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006266:	4b0f      	ldr	r3, [pc, #60]	@ (80062a4 <vPortEnterCritical+0x58>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3301      	adds	r3, #1
 800626c:	4a0d      	ldr	r2, [pc, #52]	@ (80062a4 <vPortEnterCritical+0x58>)
 800626e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006270:	4b0c      	ldr	r3, [pc, #48]	@ (80062a4 <vPortEnterCritical+0x58>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d110      	bne.n	800629a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006278:	4b0b      	ldr	r3, [pc, #44]	@ (80062a8 <vPortEnterCritical+0x5c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00b      	beq.n	800629a <vPortEnterCritical+0x4e>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	603b      	str	r3, [r7, #0]
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	e7fd      	b.n	8006296 <vPortEnterCritical+0x4a>
	}
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr
 80062a4:	20000010 	.word	0x20000010
 80062a8:	e000ed04 	.word	0xe000ed04

080062ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062b2:	4b12      	ldr	r3, [pc, #72]	@ (80062fc <vPortExitCritical+0x50>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10b      	bne.n	80062d2 <vPortExitCritical+0x26>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	607b      	str	r3, [r7, #4]
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	e7fd      	b.n	80062ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062d2:	4b0a      	ldr	r3, [pc, #40]	@ (80062fc <vPortExitCritical+0x50>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	4a08      	ldr	r2, [pc, #32]	@ (80062fc <vPortExitCritical+0x50>)
 80062da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062dc:	4b07      	ldr	r3, [pc, #28]	@ (80062fc <vPortExitCritical+0x50>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d105      	bne.n	80062f0 <vPortExitCritical+0x44>
 80062e4:	2300      	movs	r3, #0
 80062e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f383 8811 	msr	BASEPRI, r3
}
 80062ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20000010 	.word	0x20000010

08006300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006300:	f3ef 8009 	mrs	r0, PSP
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	4b0d      	ldr	r3, [pc, #52]	@ (8006340 <pxCurrentTCBConst>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006310:	6010      	str	r0, [r2, #0]
 8006312:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006316:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800631a:	f380 8811 	msr	BASEPRI, r0
 800631e:	f7fe ff27 	bl	8005170 <vTaskSwitchContext>
 8006322:	f04f 0000 	mov.w	r0, #0
 8006326:	f380 8811 	msr	BASEPRI, r0
 800632a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800632e:	6819      	ldr	r1, [r3, #0]
 8006330:	6808      	ldr	r0, [r1, #0]
 8006332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006336:	f380 8809 	msr	PSP, r0
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	4770      	bx	lr

08006340 <pxCurrentTCBConst>:
 8006340:	20000934 	.word	0x20000934
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop

08006348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	607b      	str	r3, [r7, #4]
}
 8006360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006362:	f7fe fe45 	bl	8004ff0 <xTaskIncrementTick>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800636c:	4b06      	ldr	r3, [pc, #24]	@ (8006388 <xPortSysTickHandler+0x40>)
 800636e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	2300      	movs	r3, #0
 8006376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006390:	4b0a      	ldr	r3, [pc, #40]	@ (80063bc <vPortSetupTimerInterrupt+0x30>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006396:	4b0a      	ldr	r3, [pc, #40]	@ (80063c0 <vPortSetupTimerInterrupt+0x34>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800639c:	4b09      	ldr	r3, [pc, #36]	@ (80063c4 <vPortSetupTimerInterrupt+0x38>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a09      	ldr	r2, [pc, #36]	@ (80063c8 <vPortSetupTimerInterrupt+0x3c>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	099b      	lsrs	r3, r3, #6
 80063a8:	4a08      	ldr	r2, [pc, #32]	@ (80063cc <vPortSetupTimerInterrupt+0x40>)
 80063aa:	3b01      	subs	r3, #1
 80063ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ae:	4b03      	ldr	r3, [pc, #12]	@ (80063bc <vPortSetupTimerInterrupt+0x30>)
 80063b0:	2207      	movs	r2, #7
 80063b2:	601a      	str	r2, [r3, #0]
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr
 80063bc:	e000e010 	.word	0xe000e010
 80063c0:	e000e018 	.word	0xe000e018
 80063c4:	20000004 	.word	0x20000004
 80063c8:	10624dd3 	.word	0x10624dd3
 80063cc:	e000e014 	.word	0xe000e014

080063d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063d6:	f3ef 8305 	mrs	r3, IPSR
 80063da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b0f      	cmp	r3, #15
 80063e0:	d915      	bls.n	800640e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063e2:	4a17      	ldr	r2, [pc, #92]	@ (8006440 <vPortValidateInterruptPriority+0x70>)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063ec:	4b15      	ldr	r3, [pc, #84]	@ (8006444 <vPortValidateInterruptPriority+0x74>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	7afa      	ldrb	r2, [r7, #11]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d20b      	bcs.n	800640e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	607b      	str	r3, [r7, #4]
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	e7fd      	b.n	800640a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800640e:	4b0e      	ldr	r3, [pc, #56]	@ (8006448 <vPortValidateInterruptPriority+0x78>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006416:	4b0d      	ldr	r3, [pc, #52]	@ (800644c <vPortValidateInterruptPriority+0x7c>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d90b      	bls.n	8006436 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	603b      	str	r3, [r7, #0]
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	e7fd      	b.n	8006432 <vPortValidateInterruptPriority+0x62>
	}
 8006436:	bf00      	nop
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr
 8006440:	e000e3f0 	.word	0xe000e3f0
 8006444:	20000f60 	.word	0x20000f60
 8006448:	e000ed0c 	.word	0xe000ed0c
 800644c:	20000f64 	.word	0x20000f64

08006450 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	@ 0x28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006458:	2300      	movs	r3, #0
 800645a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800645c:	f7fe fd0e 	bl	8004e7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006460:	4b5a      	ldr	r3, [pc, #360]	@ (80065cc <pvPortMalloc+0x17c>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006468:	f000 f916 	bl	8006698 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800646c:	4b58      	ldr	r3, [pc, #352]	@ (80065d0 <pvPortMalloc+0x180>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4013      	ands	r3, r2
 8006474:	2b00      	cmp	r3, #0
 8006476:	f040 8090 	bne.w	800659a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01e      	beq.n	80064be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006480:	2208      	movs	r2, #8
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4413      	add	r3, r2
 8006486:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f003 0307 	and.w	r3, r3, #7
 800648e:	2b00      	cmp	r3, #0
 8006490:	d015      	beq.n	80064be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f023 0307 	bic.w	r3, r3, #7
 8006498:	3308      	adds	r3, #8
 800649a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00b      	beq.n	80064be <pvPortMalloc+0x6e>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	617b      	str	r3, [r7, #20]
}
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	e7fd      	b.n	80064ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d06a      	beq.n	800659a <pvPortMalloc+0x14a>
 80064c4:	4b43      	ldr	r3, [pc, #268]	@ (80065d4 <pvPortMalloc+0x184>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d865      	bhi.n	800659a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ce:	4b42      	ldr	r3, [pc, #264]	@ (80065d8 <pvPortMalloc+0x188>)
 80064d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064d2:	4b41      	ldr	r3, [pc, #260]	@ (80065d8 <pvPortMalloc+0x188>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064d8:	e004      	b.n	80064e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d903      	bls.n	80064f6 <pvPortMalloc+0xa6>
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1f1      	bne.n	80064da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064f6:	4b35      	ldr	r3, [pc, #212]	@ (80065cc <pvPortMalloc+0x17c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d04c      	beq.n	800659a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2208      	movs	r2, #8
 8006506:	4413      	add	r3, r2
 8006508:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800650a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	1ad2      	subs	r2, r2, r3
 800651a:	2308      	movs	r3, #8
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	429a      	cmp	r2, r3
 8006520:	d920      	bls.n	8006564 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4413      	add	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <pvPortMalloc+0xfc>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	613b      	str	r3, [r7, #16]
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	e7fd      	b.n	8006548 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800654c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	1ad2      	subs	r2, r2, r3
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800655e:	69b8      	ldr	r0, [r7, #24]
 8006560:	f000 f8fc 	bl	800675c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006564:	4b1b      	ldr	r3, [pc, #108]	@ (80065d4 <pvPortMalloc+0x184>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	4a19      	ldr	r2, [pc, #100]	@ (80065d4 <pvPortMalloc+0x184>)
 8006570:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006572:	4b18      	ldr	r3, [pc, #96]	@ (80065d4 <pvPortMalloc+0x184>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b19      	ldr	r3, [pc, #100]	@ (80065dc <pvPortMalloc+0x18c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d203      	bcs.n	8006586 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800657e:	4b15      	ldr	r3, [pc, #84]	@ (80065d4 <pvPortMalloc+0x184>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a16      	ldr	r2, [pc, #88]	@ (80065dc <pvPortMalloc+0x18c>)
 8006584:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	4b11      	ldr	r3, [pc, #68]	@ (80065d0 <pvPortMalloc+0x180>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	431a      	orrs	r2, r3
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800659a:	f7fe fc7d 	bl	8004e98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00b      	beq.n	80065c0 <pvPortMalloc+0x170>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	60fb      	str	r3, [r7, #12]
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	e7fd      	b.n	80065bc <pvPortMalloc+0x16c>
	return pvReturn;
 80065c0:	69fb      	ldr	r3, [r7, #28]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3728      	adds	r7, #40	@ 0x28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20001b70 	.word	0x20001b70
 80065d0:	20001b7c 	.word	0x20001b7c
 80065d4:	20001b74 	.word	0x20001b74
 80065d8:	20001b68 	.word	0x20001b68
 80065dc:	20001b78 	.word	0x20001b78

080065e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d04a      	beq.n	8006688 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065f2:	2308      	movs	r3, #8
 80065f4:	425b      	negs	r3, r3
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4413      	add	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	4b22      	ldr	r3, [pc, #136]	@ (8006690 <vPortFree+0xb0>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10b      	bne.n	8006626 <vPortFree+0x46>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60fb      	str	r3, [r7, #12]
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	e7fd      	b.n	8006622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00b      	beq.n	8006646 <vPortFree+0x66>
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	60bb      	str	r3, [r7, #8]
}
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	4b11      	ldr	r3, [pc, #68]	@ (8006690 <vPortFree+0xb0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d019      	beq.n	8006688 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d115      	bne.n	8006688 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	4b0b      	ldr	r3, [pc, #44]	@ (8006690 <vPortFree+0xb0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	43db      	mvns	r3, r3
 8006666:	401a      	ands	r2, r3
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800666c:	f7fe fc06 	bl	8004e7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	685a      	ldr	r2, [r3, #4]
 8006674:	4b07      	ldr	r3, [pc, #28]	@ (8006694 <vPortFree+0xb4>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4413      	add	r3, r2
 800667a:	4a06      	ldr	r2, [pc, #24]	@ (8006694 <vPortFree+0xb4>)
 800667c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800667e:	6938      	ldr	r0, [r7, #16]
 8006680:	f000 f86c 	bl	800675c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006684:	f7fe fc08 	bl	8004e98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006688:	bf00      	nop
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20001b7c 	.word	0x20001b7c
 8006694:	20001b74 	.word	0x20001b74

08006698 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800669e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80066a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066a4:	4b27      	ldr	r3, [pc, #156]	@ (8006744 <prvHeapInit+0xac>)
 80066a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 0307 	and.w	r3, r3, #7
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00c      	beq.n	80066cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3307      	adds	r3, #7
 80066b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0307 	bic.w	r3, r3, #7
 80066be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006744 <prvHeapInit+0xac>)
 80066c8:	4413      	add	r3, r2
 80066ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006748 <prvHeapInit+0xb0>)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006748 <prvHeapInit+0xb0>)
 80066d8:	2200      	movs	r2, #0
 80066da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	4413      	add	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066e4:	2208      	movs	r2, #8
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0307 	bic.w	r3, r3, #7
 80066f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4a15      	ldr	r2, [pc, #84]	@ (800674c <prvHeapInit+0xb4>)
 80066f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066fa:	4b14      	ldr	r3, [pc, #80]	@ (800674c <prvHeapInit+0xb4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2200      	movs	r2, #0
 8006700:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006702:	4b12      	ldr	r3, [pc, #72]	@ (800674c <prvHeapInit+0xb4>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	1ad2      	subs	r2, r2, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006718:	4b0c      	ldr	r3, [pc, #48]	@ (800674c <prvHeapInit+0xb4>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4a0a      	ldr	r2, [pc, #40]	@ (8006750 <prvHeapInit+0xb8>)
 8006726:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	4a09      	ldr	r2, [pc, #36]	@ (8006754 <prvHeapInit+0xbc>)
 800672e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006730:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <prvHeapInit+0xc0>)
 8006732:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006736:	601a      	str	r2, [r3, #0]
}
 8006738:	bf00      	nop
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	20000f68 	.word	0x20000f68
 8006748:	20001b68 	.word	0x20001b68
 800674c:	20001b70 	.word	0x20001b70
 8006750:	20001b78 	.word	0x20001b78
 8006754:	20001b74 	.word	0x20001b74
 8006758:	20001b7c 	.word	0x20001b7c

0800675c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006764:	4b27      	ldr	r3, [pc, #156]	@ (8006804 <prvInsertBlockIntoFreeList+0xa8>)
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e002      	b.n	8006770 <prvInsertBlockIntoFreeList+0x14>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	429a      	cmp	r2, r3
 8006778:	d8f7      	bhi.n	800676a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	4413      	add	r3, r2
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	429a      	cmp	r2, r3
 800678a:	d108      	bne.n	800679e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	441a      	add	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	441a      	add	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d118      	bne.n	80067e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4b14      	ldr	r3, [pc, #80]	@ (8006808 <prvInsertBlockIntoFreeList+0xac>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d00d      	beq.n	80067da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	441a      	add	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e008      	b.n	80067ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067da:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <prvInsertBlockIntoFreeList+0xac>)
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	e003      	b.n	80067ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d002      	beq.n	80067fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr
 8006804:	20001b68 	.word	0x20001b68
 8006808:	20001b70 	.word	0x20001b70

0800680c <memset>:
 800680c:	4603      	mov	r3, r0
 800680e:	4402      	add	r2, r0
 8006810:	4293      	cmp	r3, r2
 8006812:	d100      	bne.n	8006816 <memset+0xa>
 8006814:	4770      	bx	lr
 8006816:	f803 1b01 	strb.w	r1, [r3], #1
 800681a:	e7f9      	b.n	8006810 <memset+0x4>

0800681c <__libc_init_array>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	2600      	movs	r6, #0
 8006820:	4d0c      	ldr	r5, [pc, #48]	@ (8006854 <__libc_init_array+0x38>)
 8006822:	4c0d      	ldr	r4, [pc, #52]	@ (8006858 <__libc_init_array+0x3c>)
 8006824:	1b64      	subs	r4, r4, r5
 8006826:	10a4      	asrs	r4, r4, #2
 8006828:	42a6      	cmp	r6, r4
 800682a:	d109      	bne.n	8006840 <__libc_init_array+0x24>
 800682c:	f000 f828 	bl	8006880 <_init>
 8006830:	2600      	movs	r6, #0
 8006832:	4d0a      	ldr	r5, [pc, #40]	@ (800685c <__libc_init_array+0x40>)
 8006834:	4c0a      	ldr	r4, [pc, #40]	@ (8006860 <__libc_init_array+0x44>)
 8006836:	1b64      	subs	r4, r4, r5
 8006838:	10a4      	asrs	r4, r4, #2
 800683a:	42a6      	cmp	r6, r4
 800683c:	d105      	bne.n	800684a <__libc_init_array+0x2e>
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	f855 3b04 	ldr.w	r3, [r5], #4
 8006844:	4798      	blx	r3
 8006846:	3601      	adds	r6, #1
 8006848:	e7ee      	b.n	8006828 <__libc_init_array+0xc>
 800684a:	f855 3b04 	ldr.w	r3, [r5], #4
 800684e:	4798      	blx	r3
 8006850:	3601      	adds	r6, #1
 8006852:	e7f2      	b.n	800683a <__libc_init_array+0x1e>
 8006854:	08006940 	.word	0x08006940
 8006858:	08006940 	.word	0x08006940
 800685c:	08006940 	.word	0x08006940
 8006860:	08006944 	.word	0x08006944

08006864 <memcpy>:
 8006864:	440a      	add	r2, r1
 8006866:	4291      	cmp	r1, r2
 8006868:	f100 33ff 	add.w	r3, r0, #4294967295
 800686c:	d100      	bne.n	8006870 <memcpy+0xc>
 800686e:	4770      	bx	lr
 8006870:	b510      	push	{r4, lr}
 8006872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006876:	4291      	cmp	r1, r2
 8006878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800687c:	d1f9      	bne.n	8006872 <memcpy+0xe>
 800687e:	bd10      	pop	{r4, pc}

08006880 <_init>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	bf00      	nop
 8006884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006886:	bc08      	pop	{r3}
 8006888:	469e      	mov	lr, r3
 800688a:	4770      	bx	lr

0800688c <_fini>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	bf00      	nop
 8006890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006892:	bc08      	pop	{r3}
 8006894:	469e      	mov	lr, r3
 8006896:	4770      	bx	lr
